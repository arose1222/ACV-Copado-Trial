<apex:page showHeader="true"
           sidebar="false"
           docType="html-5.0"
           standardStylesheets="false"
           controller="FLODocs.StrongpointAgentBlockController">
           
    <html ng-app="MultiSelectPicklistDemo" 
          xmlns="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"> 
        <head>
            <!-- Include Lighting design System CSS -->
            
			<apex:slds />

			<style type="text/css">
				.zen .zen-tabMenu a {
					color: #353535 !important;
					font-family: Arial,Helvetica,sans-serif !important;
				}
				html {
					line-height: 1;
					background: none;
					box-sizing: initial;
				}
				.material-switch > input[type="checkbox"] {
					display: none;
				}
				.material-switch > label {
					cursor: pointer;
					height: 0px;
					position: relative;
					width: 40px;
				}
				.material-switch > label::before {
					background: rgb(0, 0, 0);
					box-shadow: inset 0px 0px 10px rgba(0, 0, 0, 0.5);
					border-radius: 8px;
					content: '';
					height: 16px;
					margin-top: -8px;
					position:absolute;
					opacity: 0.3;
					transition: all 0.4s ease-in-out;
					width: 40px;
				}
				.material-switch > label::after {
					background: rgb(255, 255, 255);
					border-radius: 16px;
					box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);
					content: '';
					height: 24px;
					left: -4px;
					margin-top: -8px;
					position: absolute;
					top: -4px;
					transition: all 0.3s ease-in-out;
					width: 24px;
				}
				.material-switch > input[type="checkbox"]:checked + label::before {
					background: inherit;
					opacity: 0.5;
				}
				.material-switch > input[type="checkbox"]:checked + label::after {
					background: inherit;
					left: 20px;
				}
		
				.slds-dropdown--inverse {
					background: #FFF !important;/*#FFC55A;*/
					border-top: 3px solid orange !important;
					border-left: 0 solid !important;
					border-right: 0 solid !important;
					border-bottom: 0 solid !important;
					margin-top: -3px !important;
					font-family: 'Salesforce Sans',Arial,sans-serif;
				}
				.bPageBlock {
					border-top: 0px solid !important;
				}
				.pbBody {
					margin: 0 !important;
				}
				.slds-dropdown__item a {
					text-decoration: none;
					color: #747474 !important;
					/*font-weight: bold;*/
					font-family: 'Salesforce Sans',Arial,sans-serif;
				}
				.slds-dropdown-trigger button.slds-button {
					color: #747474 !important;
				}
				.pbSubheader {
					background-color: #f7f9fb !important;
					padding: 8px !important;
					color: #222 !important;
					border-bottom: 1px solid #d8dde6 !important;
				}
				.bPageBlock {
					border: 0 !important;
					background: #FFF !important;
				}
				.slds-dropdown {
					margin-top: 0;
					border-radius: 0 0 0.25rem 0.25rem;
				}
				ol li {
					margin-left: 0;
				}
				.information p {
					margin: 10px;
				}
				.slds-button--brand  {
					padding-top: 0 !important;
					padding-bottom: 0 !important;
					padding-left: 1rem !important;
					padding-right: 1rem !important;
					background-color: #0070d2 !important;
					background: #0070d2 !important;
					border: 1px solid #0070d2 !important;
					color: white !important;
				}
				.message.errorM3 {
					display:none;
				}
				.schedulerWrapper .slds-form-element {
					display: inline-block;
					margin-right: 20px;
					min-width: 140px;
				}
				.dateInput {
					min-height: 23px;
					line-height: 1;
				}
				div.slds-input input {
					background-color: white;
					color: #16325c;
					border: 1px solid #d8dde6;
					border-radius: 0.25rem;
					width: 100%;
					transition: border 0.1s linear, background-color 0.1s linear;
					display: inline-block;
					padding: 0 1rem 0 0.75rem;
					line-height: 1.875rem;
					min-height: calc(1.875rem + (1px * 2));
					max-width: 250px;
					margin-left: 20px
				}
				div.slds-input select {
					background-color: white;
					color: #16325c;
					border: 1px solid #d8dde6;
					border-radius: 0.25rem;
					width: 100%;
					transition: border 0.1s linear, background-color 0.1s linear;
					display: inline-block;
					padding: 0 1rem 0 0.75rem;
					line-height: 1.875rem;
					min-height: calc(1.875rem + (1px * 2));
					max-width: 200px;
				}
				div.slds-input {
					border: 0;
				}
				button.mainMenuButton:hover div {
					display: block !important;
				}
				li.mainMenuButton:hover div {
					display: block !important;
				}
		
				span.submenuList {
					margin-left: 200px;
					margin-top: -34px !important;
					box-shadow: -1px 2px 2px 1px rgba(0,0,0,0.2);
				}
		
				li.subMenuButton:hover span.subMenuList {
					display: block !important;
					margin-left: 200px;
					margin-top: -34px !important;
					box-shadow: -1px 2px 2px 1px rgba(0,0,0,0.2);
				}
		
				li.subMenuButton {
					min-width: 200px;
				}
		
				.slds-tabs--default__item {
					margin-left: 1.5em !important;
				}
		
				.slds-tabs--default__item.slds-active:after, .slds-tabs--default__item.slds-is-active:after {
					background-color: orange !important;
				}
				ul > li.slds-tabs--default__item {
					margin-bottom: 0;
				}
				.slds-trial-header {
					height: 40px !important;
					padding: 0 !important;
				}
		
				.slds-trial-header a:not(.slds-button--neutral):hover, .slds-trial-header a:not(.slds-button--neutral):focus, .slds-trial-header button:not(.slds-button--neutral):hover, .slds-trial-header button:not(.slds-button--neutral):focus {
					color: currentColor;
				}
		
				ul.flodocslinksUl {
					font-size: 1rem;
					font-family: 'Salesforce Sans',Arial,sans-serif;
					padding: 20px 0;
				}
		
				ul.flodocslinksUl  li{
					padding: 5px 0;
				}
		
				/*ul.flodocslinksUl li ul {
					visibility: hidden;
					opacity: 0;
					transition: visibility 0s, opacity 2s linear;
				}*/
		
				ul.flodocslinksUl li:hover ul {
					/*display:block !important;
					visibility: visible;
					opacity: 1;*/
				}
				#collapseall {
					font-size: 1rem;
					font-family: 'Salesforce Sans',Arial,sans-serif;
				}
				#expandall {
					font-size: 1rem;
					font-family: 'Salesforce Sans',Arial,sans-serif;
				}
				.successMessage {
					padding: 5px;
					text-align: center;
					background-color: #4bca81;
					color: white;
					font-weight: bold;
				}
				.errorMessage {
					padding: 5px;
					text-align: center;
					background-color: #d4504c;
					color: white;
					font-weight: bold;
				}
		
				.slds-dropdown__list li:hover{
					background-color: orange;
				}
		
				.toTheRight {
					float: right;
				}
		
				.toTheLeft {
					float: left;
				}
		
				td.left {
					width: 85px !important;
					height: auto;
				}
				td.left div{
					width: 85px !important;
				}
				img#phHeaderLogoImage {
					width: 85px;
					height: 55px;
				}
			</style>

            <style>
				.pageWrapper {
					padding: 20px;
				}
				body .pbBody table.list tr.headerRow td, body .pbBody table.list tr.headerRow th {
				    background: #FFF;
				    border-width: 0;
				    color: #000;
				    font-size: .9em;
				    font-weight: 300;
				    padding: 0.5rem;
				    min-height: 100% !important;
    				height: 100%;
				}
				table.list {
				    border: 0;
				    border-bottom: 1px solid #e0e3e5;
				    border-top: 1px solid #e0e3e5;
				}
				td.left {
		            width: 85px !important;
		            height: auto;
		        }
		        td.left div{
		            width: 85px !important;
		        }
		        img#phHeaderLogoImage {
		            width: 85px;
		            height: 55px;
		        }
		        .hasMotif {
				    margin: 0;
				    padding: 0 10px;
				}
				html {
					height: 100% !important;
				}
				body {
					min-height: 100% !important;
    				height: 100%;
				}
			</style>
            
            <script>   
	            var app = angular.module('MultiSelectPicklistDemo', []);
	            app.controller('HomeController', ['$scope', '$interval' , function($scope, $interval) {
	            	//fetch parent picklist values
	            	$scope.objectPicklistValues = {!allObjects}; 
	            	$scope.filters = [];
	            	$scope.renderMultiPicklist = false; 
	            	$scope.renderButton = false;
	            	$scope.renderFilters = false;
	            	$scope.deployRuning = false;
	            	$scope.objFilter = null;
	            	$scope.dlLogId = '';
	            	$scope.showSuccessMessage = false;
					$scope.errorMessage = '';

	                //fetch the picklist values from controller
	                $scope.allPicklistValues = [];//{!ControllsForSelectedObject}; 
	                $scope.selectedPicklistValues = [];
	                $scope.selectedAddElementIndex = null;
	                $scope.selectedRemoveElementIndex = null;

	                $scope.objectChanged = function() {
	                	if ($scope.objFilter != undefined && $scope.objFilter != null) {
		                		FLODocs.StrongpointAgentBlockController.filterByObject($scope.objFilter, function(result, event) {
				               	$scope.allPicklistValues = JSON.parse(result);
				            	$scope.$apply();

		                		FLODocs.StrongpointAgentBlockController.getSelectedControls($scope.objFilter, function(result, event) {
		                			$scope.selectedPicklistValues = JSON.parse(result);
		                			$scope.renderMultiPicklist = true;
		                			$scope.$apply();
		                		}, { escape: false });
				           	}, { escape: false });
			           	} else {
	                		$scope.renderMultiPicklist = false;
	                	}
	                }
	                
	                // Below function will help to set the index of element that needs to be added
	                $scope.setElementIndexToAdd = function(index) {
	                    $scope.selectedAddElementIndex= index;
	                }
	                
	                // Below function will add selected element to the selected elememt list and also removes the element from all element list 
	                $scope.addToSelectedPicklistValues = function() {
	                
	                    if($scope.selectedAddElementIndex != undefined || $scope.selectedAddElementIndex === 0){
	                        var selectedPicklistValue = $scope.allPicklistValues[$scope.selectedAddElementIndex];
	                        $scope.selectedPicklistValues.push(selectedPicklistValue);
	                        $scope.allPicklistValues.splice($scope.selectedAddElementIndex, 1); 
	                        $scope.selectedAddElementIndex = null;                
	                        selectedPicklistValue = null;
	                        $scope.renderButton = true;
	                    }    
	                }
	                
	                // Below function will help to set the index of element that needs to be removed
	                $scope.setElementIndexToRemove = function(index) {
	                    $scope.selectedRemoveElementIndex = index; 
	                }
	                
	                // Below function will remove selected element from the selected elememt list and also add the element back to the all element list
	                $scope.removeFromSelectedPicklistValues = function() { 
	                    if($scope.selectedRemoveElementIndex != undefined || $scope.selectedRemoveElementIndex === 0){
	                        var selectedPicklistValueToRemove = $scope.selectedPicklistValues[$scope.selectedRemoveElementIndex ];
	                        $scope.selectedPicklistValues.splice($scope.selectedRemoveElementIndex , 1); 
	                        $scope.allPicklistValues.push(selectedPicklistValueToRemove);
	                        $scope.selectedRemoveElementIndex = null;
	                        selectedPicklistValueToRemove  = null;
	                        $scope.renderButton = true;
	                    }  

	                    /*if ($scope.selectedPicklistValues == null || $scope.selectedPicklistValues.length == 0) {
	                    	$scope.renderButton = false;
	                    } */  
	                }

	                $scope.getFilters = function() {
	                	var custosIds = [];
	                	for (pv in $scope.selectedPicklistValues) {
	                		custosIds.push($scope.selectedPicklistValues[pv].Id);
	                	}

	                	FLODocs.StrongpointAgentBlockController.getFilters(custosIds, function(result, event) {
			               $scope.filters = JSON.parse(result);
			               $scope.renderFilters = true;
			               $scope.$apply();
			           	}, { escape: false });
			           	custosIds = null;
	                }

					$scope.closeModal = function() {
						$scope.renderFilters = false;
					}

					$scope.executeTriggerDeployment = function() {
						var custosIds = [];
	                	for (pv in $scope.selectedPicklistValues) {
	                		custosIds.push($scope.selectedPicklistValues[pv].Id);
	                	}
						FLODocs.StrongpointAgentBlockController.deployTriggers($scope.objFilter, custosIds, function(result, event) {
			               $scope.renderFilters = false;
			               $scope.deployRuning = true;
			               $scope.dlLogId = result;
			               $scope.checkTriggerDeployment();
			               $scope.$apply();
			           	}, { escape: false });
					}

					var stop;
					$scope.checkTriggerDeployment = function() {
						stop = $interval(function() {
				            FLODocs.StrongpointAgentBlockController.calculateDeployProgress($scope.dlLogId, function(result, event) {
				                var message = result;
				                if (message != '') {
				               		$scope.stopTriggerInterval();
				               		if (message.indexOf('error') != -1) {
				               			$scope.errorMessage = message;
				               			$scope.showSuccessMessage = false;
				               		} else {
				               			$scope.errorMessage = '';
				               			$scope.showSuccessMessage = true;
				               		}
				               		$scope.deployRuning = false;
				                	$scope.$apply();
				                }
				           	}, { escape: false });
			          	}, 1000);
			        }
			        $scope.stopTriggerInterval = function() {
			          	if (angular.isDefined(stop)) {
			            	$interval.cancel(stop);
			            	stop = undefined;
			          	}
			        };	
		        }]);
		        
		    </script>
        </head>
        <body ng-controller="HomeController">

			<apex:form >

			<c:StrongpointMenu />

            <div class="slds">
            	<div class="slds-page-header">
					<div class="slds-grid">
						<div class="slds-col slds-has-flexi-truncate">
							<div class="slds-media slds-no-space slds-grow">
								<div class="slds-media__figure">
									<img src="{!$Resource.FLO_Logo}" style="max-width: 80px;"/>
								</div>
								<div class="slds-media__body">
									<p class="slds-text-title--caps slds-line-height--reset">Agent Blocking</p>
									<h1 class="slds-page-header__title slds-m-right--small slds-align-middle slds-truncate" title="this should match the Record Title">Block record creation using agent controls</h1>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="pageWrapper">
					<div ng-if="errorMessage != ''" style="text-align: center;color: red;font-size: 14pt;">
                        {{errorMessage}}
                    </div>
                    <div ng-if="showSuccessMessage" style="text-align: center;color: green;font-size: 14pt;">
                        Triggers Successfully deployed
                    </div>
                                    
					<div class="slds-form-element">
						<label class="slds-form-element__label" for="select-01">Select Object</label>
						<div class="slds-form-element__control">
							<div class="slds-select_container">
								<select class="slds-select" id="select-01" ng-model="objFilter" ng-change="objectChanged();">
									<option ng-repeat="obj in objectPicklistValues" value="{{obj}}">{{obj}}</option>
								</select>
							</div>
						</div>
					</div>
	                <div class="slds-picklist--draggable slds-grid" style="padding-top: 20px;" ng-if="renderMultiPicklist">
	                    <!-- Left Hand side block -->
	                    <div class="slds-form-element" style="width: 50%">
	                        <span class="slds-form-element__label" aria-label="select-1">Picklist Values</span>
	                        <div class="slds-picklist slds-picklist--multi">
	                            <ul ng-model="allPicklistValues" class="picklist slds-picklist__options slds-picklist__options--multi shown" style="width: 100%">
	                                <div ng-repeat="item in allPicklistValues | filter : objFilter" class="app">
	                                    <li class="slds-picklist__item" aria-selected="false" tabindex="0" role="option" ng-click="setElementIndexToAdd($index)" ng-dblclick="setElementIndexToAdd($index);addToSelectedPicklistValues()" 
	                                    style="margin: 0;">
	                                        <span class="slds-truncate">
	                                            <span>{{item.Name}}</span>
	                                        </span>
	                                    </li>
	                                </div>
	                            </ul>
	                        </div>
	                    </div>
	                    <!-- / Left Hand side block -->
	                    
	                    <!-- Right / Left Arrow -->
	                    <div class="slds-grid slds-grid--vertical">
	                        
	                        <button class="slds-button slds-button--icon-container">
	                            <svg aria-hidden="true" class="slds-button__icon" ng-click="addToSelectedPicklistValues()">
	                                <use xlink:href="{!URLFOR($Resource.SLDS22, 'assets/icons/utility-sprite/svg/symbols.svg#right')}" ></use>
	                            </svg>
	                            <span class="slds-assistive-text" >Right arrow</span>
	                        </button>
	                        
	                        <button class="slds-button slds-button--icon-container">
	                            <svg aria-hidden="true" class="slds-button__icon" ng-click="removeFromSelectedPicklistValues()">
	                                <use xlink:href="{!URLFOR($Resource.SLDS22, 'assets/icons/utility-sprite/svg/symbols.svg#left')}" ></use>
	                            </svg>
	                            <span class="slds-assistive-text" >Left arrow</span>
	                        </button>
	                    </div>
	                    <!-- / Right / Left Arrow -->
	                    
	                    <!-- Right Hand side block -->
	                    <div class="slds-form-element" style="width: 50%">
	                        <span class="slds-form-element__label" aria-label="select-2">Selected Values</span>
	                        <div  class="slds-picklist slds-picklist--multi" >                          
	                            <ul ng-model="selectedPicklistValues" class="picklist slds-picklist__options slds-picklist__options--multi shown" style="width: 100%">
	                                <div ng-repeat="item in selectedPicklistValues" class="app">
	                                    <li class="slds-picklist__item" aria-selected="false" tabindex="0" role="option" ng-click="setElementIndexToRemove($index)" ng-dblclick="setElementIndexToRemove($index);removeFromSelectedPicklistValues()">
	                                        <span class="slds-truncate">
	                                            <span class="items" >{{item.Name}}</span>
	                                        </span>
	                                    </li>
	                                </div>
	                            </ul>                              
	                        </div>
	                    </div>
	                    <!-- / Right Hand side block -->
	                </div>
					<div class="slds-form-element" ng-if="renderButton" style="text-align: center; padding: 25px;">
						<button class="slds-button slds-button--brand" ng-click="getFilters()">
							Save
						</button>
					</div>

					<div ng-if="renderFilters">
						<div role="dialog" tabindex="-1" aria-labelledby="header43" class="slds-modal slds-fade-in-open">
							<div class="slds-modal__container">
								<div class="slds-modal__header">
									<button class="slds-button slds-modal__close slds-button--icon-inverse" title="Close" ng-click="closeModal()">
										 X
										<span class="slds-assistive-text">Close</span>
									</button>
									<h2 id="header43" class="slds-text-heading--medium">Filters to be created</h2>
								</div>
								<div class="slds-modal__content slds-p-around--medium">
									<p style="font-size: 12pt;"><b>The following components will be deployed into your salesforce instace. Would you like to continue?</b></p>

									<h2 class="slds-text-heading_medium slds-hyphenate" id="modal-heading-01" style="color:red;margin-top: 25px;font-size: 12pt;">Trigger</h2>
									<table class="display slds-table slds-table_bordered slds-table_cell-buffer">
										<thead>
											<tr class="slds-text-title_caps">
												<th scope="col">Trigger Name</th>
											</tr>
										</thead>
										<tbody>
											<tr>
												<td scope="row">Strongpoint{{objFilter}}Trigger</td>
											</tr>
			                        	</tbody>
			                        </table>

									<h2 class="slds-text-heading_medium slds-hyphenate" id="modal-heading-01" style="color:red;margin-top: 25px;font-size: 12pt;">Unit Test Name</h2>
			                        <table class="display slds-table slds-table_bordered slds-table_cell-buffer">
										<tr class="slds-text-title_caps">
											<th scope="col">Unit Test Name</th>
										</tr>
										<tr >
											<td scope="row">Strongpoint{{objFilter}}TriggerTest</td>
										</tr>
			                        </table>

									<h2 class="slds-text-heading_medium slds-hyphenate" id="modal-heading-01" style="color:red;margin-top: 25px;font-size: 12pt;">Filters</h2>
									<table class="display slds-table slds-table_bordered slds-table_cell-buffer">
										<tr class="slds-text-title_caps">
											<th scope="col">FIELD</th>
											<th scope="col">OPERATOR</th>
											<th scope="col">VALUE</th>
										</tr>
										<tr ng-repeat="items in filters" >
											<td scope="row">{{items.fieldName}}</td>
											<td scope="row">{{items.operator}}</td>
											<td scope="row">{{items.value}}</td>
										</tr>
			                        </table>
			                    </div>
								<div class="slds-modal__footer">
									<button class="slds-button slds-button_neutral" ng-click="closeModal()">No</button>
									<button class="slds-button slds-button--brand" ng-click="executeTriggerDeployment()">Yes</button>
								</div>
							</div>
						</div>
						<div class="slds-backdrop slds-backdrop--open"></div>
					</div>
	            </div>

				<div class="demo-only" style="height: 6rem;" ng-if="deployRuning">
				  	<div class="slds-spinner_container" style="background-color: transparent;">
					    <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_inverse">
						    <span class="slds-assistive-text">Loading</span>
						    <div class="slds-spinner__dot-a"></div>
						    <div class="slds-spinner__dot-b"></div>
					    </div>
				  	</div>

					<div class="slds-backdrop slds-backdrop--open"></div>
				</div>
	        </div> 
            <!-- Include JS Resources  -->
            <apex:includeScript value="{!URLFOR($Resource.FLODocs__FLOJQuery, '/jquery-ui-1.12.1.custom/external/jquery/jquery.js')}"  />
			<apex:includeScript value="{!URLFOR($Resource.FLODocs__FlodocResources, 'js/angular.min.js')}"/>          

			</apex:form>
			
        </body>
    </html>
</apex:page>