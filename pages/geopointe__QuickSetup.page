<apex:page controller="geopointe.QuickSetup_Controller" extensions="geopointe.RemoteAction" action="{!init}" showHeader="true" sidebar="false" title="Geopointe - Quick Setup">
  <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">
    <c:GlobalVars />
    <apex:stylesheet value="{!URLFOR($Resource.geopointe__geopointeWeb, '/vendor/mapWeb.vendor.css')}" />
    <!-- App Vendor CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.geopointe__geopointeWeb, '/dist/mapWeb.css')}" />
    <!-- App CSS -->
    <apex:includeScript value="{!$Resource.geopointe__sorttable}" />
    <!-- Sorttable -->
    <script src="{!URLFOR($Page.translations)}" />
    <!-- Geopointe translations - needed for fieldSelector -->
    <script src="{!URLFOR($Resource.geopointeWeb, '/vendor/mapWeb.vendor.js')}"></script>
    <script src="{!$Resource.GeopointeJS}" type="text/javascript" />
    <script src="{!URLFOR($Resource.geopointeWeb, '/dist/mapWeb.js')}"></script>

    <!-- Include the Google AJAX API onto the page -->
    <apex:includeScript value="https://www.google.com/jsapi" />

    <apex:outputPanel rendered="{!userLanguage!='en'}">
      <!-- localize.js -->
      <script type="text/javascript">
        document.getElementById('AppBodyHeader').setAttribute('notranslate', '');
        document.querySelector('.bPageFooter').setAttribute('notranslate', '');
      </script>
      <script src="{!URLFOR($Resource.jquery, '/js/lib/localize.9.17.2018.js')}" />
      <script>
        !(function (a) {
          if (!a.Localize) {
            a.Localize = {};
            for (
              var e = [
                  'translate',
                  'untranslate',
                  'phrase',
                  'initialize',
                  'translatePage',
                  'setLanguage',
                  'getLanguage',
                  'detectLanguage',
                  'untranslatePage',
                  'bootstrap',
                  'prefetch',
                  'on',
                  'off',
                ],
                t = 0;
              t < e.length;
              t++
            )
              a.Localize[e[t]] = function () {};
          }
        })(window);
      </script>

      <script>
        Localize.initialize({
          key: '1SeX6sYAXWLng',
          rememberLanguage: false,
          saveNewPhrases: false,
          translateBody: true,
          blockedClasses: ['walkme-custom-balloon-v3', 'walkme-menu', 'walkme-player'],
        });
        Localize.setLanguage('{!userLanguage}');
      </script>
    </apex:outputPanel>

    <apex:includeScript value="{!$Page.geopointe__js_GA}" />
    <!-- Google Analytics -->

    <apex:slds />
    <style>
      .noSidebarCell {
        padding: 0px;
      }

      .CSObjectValue {
        display: none;
      }

      .CSObjectPathValue {
        display: none;
      }

      .quickBigBtn {
        margin: 0px 16px 0px 0px !important;
        height: 148px;
        width: 128px;
        border-radius: 3px;
        border: 1px #d8dde6 solid;
        padding: 0 !important;
        display: block !important;
      }

      .quickBigBtn.pressed {
        border: 1px #989ea9 solid;
        background-color: #c6cfde;
      }

      .quickBigBtn.pressed:hover {
        background-color: #c6cfde !important;
      }

      .quickBigBtn input {
        display: none;
      }

      .quickBtnIcon {
        width: 120px;
        text-align: center;
        margin: 3px 3px auto 3px;
      }

      .quickBtnSvg {
        height: 112px !important;
        width: 112px !important;
        margin: 0 auto;
      }

      .quickBtnCaption {
        width: 128px;
        text-align: center;
        margin: 0;
      }

      p {
        padding: 8px 0 !important;
      }

      .addressBlock {
        margin-bottom: 10px;
      }

      .addressBlock a {
        color: #005fb2;
      }
    </style>

    <div class="slds">
      <div class="slds-page-header" role="banner" style="padding: 24px">
        <div class="slds-grid">
          <div class="slds-col slds-has-flexi-truncate">
            <div class="slds-media slds-no-space slds-grow">
              <div class="slds-media__figure">
                <img src="{!URLFOR($Resource.images, 'geopointeLogo.png')}" style="height: 32px" />
              </div>
              <div class="slds-media__body">
                <h1 class="slds-text-title--caps slds-line-height--reset" style="margin-top: 3px; font-size: 1.4em; font-weight: 400">Geopointe Quick Setup</h1>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <apex:outputPanel id="pageMessages">
      <apex:pageMessages escape="false" />
    </apex:outputPanel>

    <apex:form styleClass="slds">
      <apex:outputPanel id="quickSetupWrapper" layout="block" style="padding: 3px; margin-left: 30px">
        <apex:outputPanel id="initFailed_panel" rendered="{!initFailed}">
          <p>Before we continue, please go to the Geopointe Setup tab and fill in the required fields on <b>Org Settings</b>.</p>
          <script type="text/javascript">
            document.querySelector('.wt-Geopointe-Setup').style.backgroundColor = 'lightGreen';
          </script>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!NOT(initFailed)}">
          <!-- STAGE ONE: Select Objects to create DataSets for -->
          <apex:outputPanel id="cfgSelect" rendered="{!quickSetupStage=='cfgSelect'}">
            <p>Welcome to Geopointe! Select the Salesforce Objects you would like to map, then select <b>Next</b>.</p>

            <div style="display: flex; flex-direction: row; min-height: 150px">
              <apex:outputPanel rendered="{!cfgAccount!=null}">
                <a class="btn slds-button slds-button--neutral quickBigBtn" onclick="toggle('chkAccount')">
                  <apex:inputCheckbox id="chkAccount" value="{!cfgAccount.selected}" styleClass="quickCheck chkAccount" />
                  <div class="slds-icon__container slds-icon-standard-account quickBtnIcon">
                    <svg aria-hidden="true" class="slds-icon quickBtnSvg">
                      <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#account')}"></use>
                    </svg>
                  </div>
                  <div class="quickBtnCaption accountCaption" notranslate="true">{!$ObjectType.Account.LabelPlural}</div>
                </a>
              </apex:outputPanel>
              <apex:outputPanel rendered="{!cfgContact!=null}">
                <a class="btn slds-button slds-button--neutral quickBigBtn" onclick="toggle('chkContact')">
                  <apex:inputCheckbox id="chkContact" value="{!cfgContact.selected}" styleClass="quickCheck chkContact" />
                  <div class="slds-icon__container slds-icon-standard-contact quickBtnIcon">
                    <svg aria-hidden="true" class="slds-icon quickBtnSvg">
                      <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#contact')}"></use>
                    </svg>
                  </div>
                  <div class="quickBtnCaption contactCaption" notranslate="true">{!$ObjectType.Contact.LabelPlural}</div>
                </a>
              </apex:outputPanel>
              <apex:outputPanel rendered="{!cfgOpportunity!=null}">
                <a class="btn slds-button slds-button--neutral quickBigBtn" onclick="toggle('chkOpportunity')">
                  <apex:inputCheckbox id="chkOpportunity" value="{!cfgOpportunity.selected}" styleClass="quickCheck chkOpportunity" />
                  <div class="slds-icon__container slds-icon-standard-opportunity quickBtnIcon">
                    <svg aria-hidden="true" class="slds-icon quickBtnSvg">
                      <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#opportunity')}"></use>
                    </svg>
                  </div>
                  <div class="quickBtnCaption opportunityCaption" notranslate="true">{!$ObjectType.Opportunity.LabelPlural}</div>
                </a>
              </apex:outputPanel>
              <apex:outputPanel rendered="{!cfgCase!=null}">
                <a class="btn slds-button slds-button--neutral quickBigBtn" onclick="toggle('chkCase')">
                  <apex:inputCheckbox id="chkCase" value="{!cfgCase.selected}" styleClass="quickCheck chkCase" />
                  <div class="slds-icon__container slds-icon-standard-case quickBtnIcon">
                    <svg aria-hidden="true" class="slds-icon quickBtnSvg">
                      <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#case')}"></use>
                    </svg>
                  </div>
                  <div class="quickBtnCaption caseCaption" notranslate="true">{!$ObjectType.Case.LabelPlural}</div>
                </a>
              </apex:outputPanel>
              <apex:outputPanel rendered="{!cfgLead!=null}">
                <a class="btn slds-button slds-button--neutral quickBigBtn" onclick="toggle('chkLead')">
                  <apex:inputCheckbox id="chkLead" value="{!cfgLead.selected}" styleClass="quickCheck chkLead" />
                  <div class="slds-icon__container slds-icon-standard-lead quickBtnIcon">
                    <svg aria-hidden="true" class="slds-icon quickBtnSvg">
                      <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#lead')}"></use>
                    </svg>
                  </div>
                  <div class="quickBtnCaption" notranslate="true">{!$ObjectType.Lead.LabelPlural}</div>
                </a>
              </apex:outputPanel>
            </div>

            <p id="explainButtonLinkage" class="explainButtonLinkage" style="padding-top: 0.5em"></p>

            <input type="button" id="cfgStageTwo" onclick="stageTwo(); toggleSpinner();" value="Next" class="btn slds-button slds-button--neutral" disabled="disabled" />
            <apex:actionFunction name="stageTwo" action="{!stageTwo}" oncomplete="setCurrentStage(); toggleSpinner();" rerender="quickSetupWrapper,updateVars,pageMessages" />

            <p>
              <apex:image url="{!URLFOR($Resource.geopointe__images, '/info32.png')}" width="16px" /> To learn more, see the full documentation
              <a href="http://help.geopointe.com/customer/portal/articles/1811024-map-objects" target="_blank"> <b>here</b> </a>. For additional assistance, please contact support
              at <a href="mailto:help@geopointe.com"> <b>help@geopointe.com</b> </a>.
            </p>
          </apex:outputPanel>

          <!-- STAGE TWO: Choose Location Fields on selected Objects -->
          <apex:outputPanel id="cfgLocFields" rendered="{!quickSetupStage=='cfgLocFields'}">
            <p>
              Please review the address and object configuration for the selected Objects. In most cases you can accept the defaults and select <b>Next</b> to get started mapping
              your data. You can always make changes later from the <b>Map Object</b> tab of <b>Geopointe Setup</b>.
            </p>
            <div>
              <apex:repeat value="{!cfgs}" var="cfg">
                <apex:outputPanel layout="block" rendered="{!AND(cfg.selected, false == cfg.geocodeRelative)}" styleClass="addressBlock">
                  <div>
                    <div display="inline" class="slds-icon__container slds-icon-standard-{!cfg.typeName}" style="margin: 4px 0; height: 25px; width: 100%">
                      <div display="inline" style="margin: 2px 6px; color: white; vertical-align: middle">
                        <b> <span notranslate="true">{!cfg.displayName}</span> Address Fields</b>
                      </div>
                    </div>
                  </div>
                  <table>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Name Field</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput mapObjectName-{!cfg.typeName}">
                        <span id="{!cfg.typeName}-Name" class="selectedFieldNameOutput" notranslate="true">{!cfg.nameField.field}</span>&nbsp;
                        <apex:inputText value="{!cfg.nameField.field}" styleClass="CSObjectValue" />
                        <apex:inputText value="{!cfg.nameField.path}" styleClass="CSObjectPathValue" />
                        <a id="change{!cfg.typeName}-Name" onclick="openFieldSelectorHandler('string', '.mapObjectName', this.id)">[change]</a>
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Street Field</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput streetField-{!cfg.typeName}">
                        <span id="{!cfg.typeName}-Street" class="selectedFieldNameOutput" notranslate="true">{!cfg.streetField.field}</span>&nbsp;
                        <apex:inputText value="{!cfg.streetField.field}" styleClass="CSObjectValue" />
                        <apex:inputText value="{!cfg.streetField.path}" styleClass="CSObjectPathValue" />
                        <a id="change{!cfg.typeName}-Street" onclick="openFieldSelectorHandler('addressField', '.streetField', this.id)">[change]</a>
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>City Field</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput cityField-{!cfg.typeName}">
                        <span id="{!cfg.typeName}-City" class="selectedFieldNameOutput" notranslate="true">{!cfg.cityField.field}</span>&nbsp;
                        <apex:inputText value="{!cfg.cityField.field}" styleClass="CSObjectValue" />
                        <apex:inputText value="{!cfg.cityField.path}" styleClass="CSObjectPathValue" />
                        <a id="change{!cfg.typeName}-City" onclick="openFieldSelectorHandler('addressField', '.cityField', this.id)">[change]</a>
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>State Field</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput stateField-{!cfg.typeName}">
                        <span id="{!cfg.typeName}-State" class="selectedFieldNameOutput" notranslate="true">{!cfg.stateField.field}</span>&nbsp;
                        <apex:inputText value="{!cfg.stateField.field}" styleClass="CSObjectValue" />
                        <apex:inputText value="{!cfg.stateField.path}" styleClass="CSObjectPathValue" />
                        <a id="change{!cfg.typeName}-State" onclick="openFieldSelectorHandler('addressField', '.stateField', this.id)">[change]</a>
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Postal Code Field</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput zipField-{!cfg.typeName}">
                        <span id="{!cfg.typeName}-PostalCode" class="selectedFieldNameOutput" notranslate="true">{!cfg.postcodeField.field}</span>&nbsp;
                        <apex:inputText value="{!cfg.postcodeField.field}" styleClass="CSObjectValue" />
                        <apex:inputText value="{!cfg.postcodeField.path}" styleClass="CSObjectPathValue" />
                        <a id="change{!cfg.typeName}-PostalCode" onclick="openFieldSelectorHandler('addressField', '.zipField', this.id)">[change]</a>
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Country Field</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput countryField-{!cfg.typeName}">
                        <span id="{!cfg.typeName}-Country" class="selectedFieldNameOutput" notranslate="true">{!cfg.countryField.field}</span>&nbsp;
                        <apex:inputText value="{!cfg.countryField.field}" styleClass="CSObjectValue" />
                        <apex:inputText value="{!cfg.countryField.path}" styleClass="CSObjectPathValue" />
                        <a id="change{!cfg.typeName}-Country" onclick="openFieldSelectorHandler('addressField', '.countryField', this.id)">[change]</a>
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Create Starter Data Sets</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput">
                        <span id="{!cfg.typeName}-StarterSets" notranslate="true"></span>&nbsp;
                        <apex:inputCheckbox value="{!cfg.createStarterDataSet}" />
                      </td>
                    </tr>
                  </table>
                </apex:outputPanel>
                <apex:outputPanel layout="block" rendered="{!AND(cfg.selected, false != cfg.geocodeRelative)}" styleClass="addressBlock">
                  <div>
                    <div display="inline" class="slds-icon__container slds-icon-standard-{!cfg.typeName}" style="margin: 4px 0; height: 25px; width: 100%">
                      <div display="inline" style="margin: 2px 6px; color: white; vertical-align: middle">
                        <b>{!cfg.displayName} Map Reference</b>
                      </div>
                    </div>
                  </div>
                  <table>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Name Field</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput referenceObjectName-{!cfg.typeName}">
                        <span id="{!cfg.typeName}-Name" class="selectedFieldNameOutput" notranslate="true">{!cfg.nameField.field}</span>&nbsp;
                        <apex:inputText value="{!cfg.nameField.field}" styleClass="CSObjectValue" />
                        <apex:inputText value="{!cfg.nameField.path}" styleClass="CSObjectPathValue" />
                        <a id="change{!cfg.typeName}-Name" onclick="openFieldSelectorHandler('string', '.referenceObjectName', this.id, true)">[change]</a>
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Referenced Map Object</b>
                      </th>
                      <td>
                        <apex:selectList value="{!cfg.referName}" multiselect="false" size="1">
                          <apex:selectOptions value="{!cfg.referNameOptions}" />
                        </apex:selectList>
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Field Referring to the Map Object</b>
                      </th>
                      <td>
                        <apex:selectList value="{!cfg.referField}" multiselect="false" size="1">
                          <apex:selectOptions value="{!cfg.referFieldOptions}" />
                        </apex:selectList>
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Create Starter Data Sets</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput">
                        <span id="{!cfg.typeName}-StarterSets" notranslate="true"></span>&nbsp;
                        <apex:inputCheckbox value="{!cfg.createStarterDataSet}" />
                      </td>
                    </tr>
                  </table>
                </apex:outputPanel>
              </apex:repeat>
              <div class="slds-section slds-is-open">
                <h3 class="slds-section__title slds-theme_shade">
                  <span class="slds-truncate slds-p-horizontal_small" title="Additional Options">Additional Options</span>
                </h3>
                <div aria-hidden="false" class="slds-section__content">
                  <table>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>Enable Calendar functionality for the selected objects.</b>
                      </th>
                      <td style="text-align: left; width: 80%" class="requiredInput">
                        <apex:inputCheckbox value="{!setupCalendar}" />
                      </td>
                    </tr>
                    <tr>
                      <th style="text-align: right; padding-right: 12px; width: 20%">
                        <b>
                          <a href="https://customers.geopointe.com/s/article/Geopointe-June-2019-Release" target="_blank">Click here to learn more.</a>
                        </b>
                      </th>
                    </tr>
                  </table>
                </div>
              </div>
            </div>
            <br />
            <input type="button" id="cfgStageThree" onclick="stageThree(); toggleSpinner();" value="Next" class="btn slds-button slds-button--neutral" />
            <apex:actionFunction name="stageThree" action="{!stageThree}" oncomplete="setCurrentStage(); toggleSpinner();" rerender="quickSetupWrapper,updateVars,pageMessages" />
          </apex:outputPanel>

          <!-- STAGE THREE: Review created Map Objects and offer to take user to map page -->
          <apex:outputPanel id="cfgFinish" rendered="{!quickSetupStage=='cfgFinish'}">
            <p>Your records are almost ready to map!</p>

            <p>
              The next step is to run the
              <a href="http://help.geopointe.com/customer/portal/articles/1811022" target="_blank"> <b>Geocoder</b> </a>, which converts address fields to points that can be placed
              on a map. Geocoding your records may take anywhere from a few minutes to several hours to complete depending on the amount of data in your system. You can check on
              the Geocoder's progress from the
              <a href="/apex/s_Main#tab-batchJobs" target="_blank">
                <b>Batch Jobs</b>
              </a>
              tab of <b>Geopointe Setup</b>.
            </p>

            <p>Click <b>Next</b> to schedule the Geocoder and open the Map page.</p>

            <input type="button" id="cfgStageFinish" onclick="stageFinish();" value="Next" class="btn slds-button slds-button--neutral" />
            <apex:actionFunction name="stageFinish" action="{!stageFinish}" rerender="pageMessages" />
          </apex:outputPanel>
        </apex:outputPanel>
      </apex:outputPanel>

      <apex:outputPanel id="updateVars">
        <script type="text/javascript">
          var currentStage = "{!quickSetupStage}";
          var existingAcct = {!existingAcct};
          var existingCont = {!existingCont};
        </script>
      </apex:outputPanel>

      <script type="text/javascript">
        // gpRemoteAction must to be pulled in globally
        var gpRemoteAction = '{!$RemoteAction.RemoteAction.doRemoteAction}';
        const accountCheckbox = document.querySelector('.chkAccount');
        const contactCheckbox = document.querySelector('.chkContact');
        const opportunityCheckbox = document.querySelector('.chkOpportunity');
        const caseCheckbox = document.querySelector('.chkCase');
        const leadCheckbox = document.querySelector('.chkLead');

        let explainedChkAccount = false;
        let explainedChkContact = false;

        /**
         * Toggles the default map object buttons
         * chkId {string} Name of the button that was clicked
         **/
        function toggle(chkId) {
          const chkbox = document.querySelector('.' + DOMPurify.sanitize(chkId));
          const chkBtn = chkbox.parentElement;
          let newCheckedVal = !chkbox.checked;
          const nextBtn = document.getElementById('cfgStageTwo');

          // Link Opp'ty and Case choices to Account and Contact respectively.
          // Also latch Account and Contact choices so we can leave them checked
          // when releasing Oppt'y and Case.
          switch (chkId) {
            case 'chkAccount':
              newCheckedVal = newCheckedVal || opportunityCheckbox.checked;
              break;

            case 'chkContact':
              newCheckedVal = newCheckedVal || caseCheckbox.checked;
              break;

            case 'chkOpportunity':
              if (newCheckedVal && !existingAcct) {
                accountCheckbox.checked = newCheckedVal;
                accountCheckbox.parentElement.classList.add('pressed');

                // Explain why opp linked to contact if it hasn't been displayed yet
                if (!explainedChkAccount && !accountCheckbox.checked) {
                  const oppUseName = document.querySelector('.opportunityCaption').innerHTML;
                  const acctUseName = document.querySelector('.accountCaption').innerHTML;
                  document.querySelector('.explainButtonLinkage').innerHTML =
                    'We map ' + DOMPurify.sanitize(oppUseName) + ' through their associated ' + DOMPurify.sanitize(acctUseName) + ', so we are setting up an object to do that.';
                  explainedChkAccount = true;
                }
              } else {
                if (!accountCheckbox.checked) {
                  accountCheckbox.parentElement.classList.remove('pressed');
                }
                document.querySelector('.explainButtonLinkage').innerHTML = '';
              }
              break;

            case 'chkCase':
              if (newCheckedVal && !existingCont) {
                contactCheckbox.checked = newCheckedVal;
                contactCheckbox.parentElement.classList.add('pressed');

                // Explain link between contact and case if it hasn't been displayed yet
                if (!explainedChkContact && contactCheckbox.checked) {
                  const caseUseName = document.querySelector('.caseCaption').innerHTML;
                  const contactUseName = document.querySelector('.contactCaption').innerHTML;
                  document.querySelector('.explainButtonLinkage').innerHTML =
                    'We map ' +
                    DOMPurify.sanitize(caseUseName) +
                    ' through their associated ' +
                    DOMPurify.sanitize(contactUseName) +
                    ', so we are setting up an object to do that.';
                  explainedChkContact = true;
                }
              } else {
                if (!contactCheckbox.checked) {
                  contactCheckbox.parentElement.classList.remove('pressed');
                }
                document.querySelector('.explainButtonLinkage').innerHTML = '';
              }
              break;
          }

          chkbox.checked = newCheckedVal;

          // 'depress' checked buttons
          if (chkbox.checked) {
            chkBtn.classList.add('pressed');
          } else {
            chkBtn.classList.remove('pressed');
          }

          // enable/disable Next depending on option selection
          nextBtn.disabled = true;
          var quickCheckBoxes = document.querySelectorAll('.quickCheck');
          for (let element of quickCheckBoxes) {
            if (element.checked) {
              nextBtn.disabled = false;
              break;
            }
          }
        }

        function prepStage() {
          if ('cfgLocFields' === currentStage) {
            geopointeAjaxStart('body', 'Creating Map Objects...');
          }
        }

        function setCurrentStage() {
          if (currentStage === 'cfgFinish') {
            geopointeAjaxEnd();
          }
        }

        /**
         * Processing method for opening the field selector.
         * Determines the appropriate start object based on the id of the form input.
         **/
        function openFieldSelectorHandler(fieldType, inputSelector, inputId, isReferenceField = false) {
          // Grab typeName from the inputId. InputId format: 'change{typeName}-{displayLabel}'
          let startObject = inputId.slice(6).split('-')[0];

          // Append type to input selector so the callback updates the correct input
          inputSelector += '-' + startObject;

          // For the name reference fields change the type to the child object
          if (isReferenceField && startObject === 'account') {
            startObject = 'opportunity';
          } else if (isReferenceField && startObject === 'contact') {
            startObject = 'case';
          }

          gp_openFieldSelector(fieldType, inputSelector, startObject);
        }
      </script>
    </apex:form>

    <app-field-selector-modal></app-field-selector-modal>

    <div id="loadingSpinner" class="slds-hide">
      <div class="slds-backdrop slds-backdrop_open">
        <div role="status" class="slds-spinner slds-spinner_brand slds-spinner_large">
          <span class="slds-assistive-text">Loading</span>
          <div class="slds-spinner__dot-a"></div>
          <div class="slds-spinner__dot-b"></div>
        </div>
      </div>
    </div>
  </html>

  <script>
    function toggleSpinner() {
      let spin = document.getElementById('loadingSpinner');
      if (spin) {
        spin.classList.toggle('slds-hide');
      }
    }
  </script>

  <script src="{!URLFOR($Resource.angular, 'angular/runtime.js')}"></script>
  <script src="{!URLFOR($Resource.angular, 'angular/polyfills.js')}"></script>
  <script src="{!URLFOR($Resource.angular, 'angular/main.js')}"></script>
  <apex:stylesheet value="{!URLFOR($Resource.geopointe__angular, 'angular/styles.css')}" />
</apex:page>