/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/scripts/Session/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/scripts/Session/actions.js":
/*!****************************************!*\
  !*** ./app/scripts/Session/actions.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var SessionActions = Reflux.createActions(['fetchSessions', 'fetchSessionNominations', 'fetchSessionCheckinList', 'checkinSession', 'checkinAttendee']);
module.exports = SessionActions;

/***/ }),

/***/ "./app/scripts/Session/app.js":
/*!************************************!*\
  !*** ./app/scripts/Session/app.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

initI18n(_.assign(enLocale['meetings'], enLocale['external_meetings'], enLocale['sessions']));
var Handler = __webpack_require__(/*! ./handler */ "./app/scripts/Session/handler.js");
var checkinHandler = __webpack_require__(/*! ./checkin_handler */ "./app/scripts/Session/checkin_handler.js");
var Api = __webpack_require__(/*! common_api */ "./app/scripts/commons/jiffle/api.js");

$(document).ready(function (jQuery) {
    if (typeof jiffle !== 'undefined') {
        Api.sfdcHandler.meetingInit(function () {
            Handler.init();
        });
    } else {
        window.sessionCheckin === true ? checkinHandler.init() : Handler.init();
    }
    setupUiI18n();
});

/***/ }),

/***/ "./app/scripts/Session/checkin_handler.js":
/*!************************************************!*\
  !*** ./app/scripts/Session/checkin_handler.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Actions = __webpack_require__(/*! ./actions */ "./app/scripts/Session/actions.js");
var Store = __webpack_require__(/*! ./store */ "./app/scripts/Session/store.js").CheckinStore;
var SessionStore = __webpack_require__(/*! ./store */ "./app/scripts/Session/store.js").SessionStore;
var Api = __webpack_require__(/*! common_api */ "./app/scripts/commons/jiffle/api.js");

var CheckinHandler = function () {
  var navbarSearch = $('.navbar-search.navbar-form');
  var filter = $('.dropdown.filter-dropdown');
  var sessionCheckinContainer = $('#session_checkin_list');
  var defaultToggleState = { viewStyle: 'list-view', tileSize: 'col-md-12' };
  var consecutiveMeetingTab = $('.tab_consecutive_meeting');
  var mobileConsecutiveCountTab = $('.mobile_tab_consecutive_meeting');
  var sessionCountTab = $('.tab_session');
  var mobileSessionCountTab = $('.mobile_tab_session');
  var internalCountTab = $('.tab_internal');
  var mobileInternalCountTab = $('.mobile_tab_internal');
  var externalCountTab = $('.tab_external');
  var mobileExternalCountTab = $('.mobile_tab_external');
  var exportBtn = $('#export');

  var storeHandlers = {
    onSessionCheckinListSuccess: onSessionCheckinListSuccess
  };

  function init() {
    setupUI();
    setupListeners();
    setupStoreListeners();
    Actions.fetchSessionCheckinList(1);
    activateTabs();
  }

  function activateTabs() {
    internalCountTab.removeClass('active');
    mobileInternalCountTab.removeClass('active');
    externalCountTab.removeClass('active');
    mobileExternalCountTab.removeClass('active');
    consecutiveMeetingTab.removeClass('active');
    mobileConsecutiveCountTab.removeClass('active');
    sessionCountTab.addClass('active');
    mobileSessionCountTab.addClass('active');
  }

  function setupUI() {
    navbarSearch.addClass('hide');
    filter.addClass('hide');
  }

  function setupStoreListeners() {
    Store.listen(function (data) {
      var callBackFunction = storeHandlers[data.action];
      if (data.action && _.isFunction(callBackFunction)) {
        callBackFunction(data.payload);
      }
    });
  }

  function onSessionCheckinListSuccess(payload) {
    var sessions = payload.data;
    displayCounts(payload.totalInternal, payload.totalExternal, payload.totalConsecMeeting, payload.totalSessions);
    var template = __webpack_require__(/*! Templates/meeting/checkin */ "./templates/meeting/checkin.hbs");
    sessions.map(function (session) {
      session.pendingCount = session.invitees_status_counts.pending || 0;
      session.totalInviteeCount = session.invitees_status_counts.total_invitees || 0;
      session.acceptedCount = session.invitees_status_counts.accepted || 0;
      session.declinedCount = session.invitees_status_counts.declined || 0;
      session.topicName = session.topic.name;
      session.startTime = moment(session.start_time, "YYYY-MM-DD hh:mm A").format("hh:mm A");
      session.endTime = moment(session.end_time, "YYYY-MM-DD hh:mm A").format("hh:mm A");
      session.meetingDate = moment(session.start_time).toDate().toMediumDate();
      session.location = session.room.name;
      session.checkedIn = session.checkin === true;
      setCheckInStatuses(session.users.internal.concat(session.users.external));
    });

    var html = template({
      meeting_list: sessions,
      toggle_state: defaultToggleState
    });
    sessionCheckinContainer.html(html);
  }

  function displayCounts(internalCount, externalCount, consecCount, sessionCount) {
    var internalTabText = i18n.t(internalCount === 1 ? "MEETING" : "MEETINGS", { count: '' });
    var externalTabText = i18n.t(externalCount === 1 ? "REQUEST" : "REQUESTS", { count: '' });
    var externalMobileTabText = i18n.t(externalCount === 1 ? "REQ" : "REQS", { count: '' });
    var sessionTabtext = i18n.t(sessionCount === 1 ? "SESSION" : "SESSIONS");
    var consecutiveTabText = i18n.t(consecCount === 1 ? "CONSECUTIVE MEETING" : "CONSECUTIVE MEETINGS");
    displayCountInTab(externalCountTab, mobileExternalCountTab, externalCount, externalTabText);
    displayCountInTab(internalCountTab, mobileInternalCountTab, internalCount, internalTabText);
    displayCountInTab(consecutiveMeetingTab, mobileConsecutiveCountTab, consecCount, consecutiveTabText);
    displayCountInTab(sessionCountTab, mobileSessionCountTab, sessionCount, sessionTabtext);
  }

  function displayCountInTab(tab, mobileTab, count, textLabel, mobileTextLabel) {
    tab.find(".meeting_count").text(count).siblings('span.title_text').text(textLabel);
    mobileTab.find(".meeting_count").text(count).siblings('span.title_text').text(mobileTextLabel || textLabel);
  }

  function setCheckInStatuses(attendees) {
    if (attendees instanceof Array) {
      attendees.map(function (attendee) {
        attendee.checkedIn = attendee.checkin === true;
      });
    }
  }

  function setupListeners() {
    $('.toggle-btn').on('click', handleToggleView);
    $(window).infiniteScroll({
      offset: 200,
      callback: fetchMoreSessionsCheckin
    });
    sessionCheckinContainer.on('change', '.checkin_meeting', handleSessionCheckin);
    sessionCheckinContainer.on('change', '.checkin_user', handleAttendeeCheckin);
    internalCountTab.on('click', handleInternalTabClick);
    mobileInternalCountTab.on('click', handleInternalTabClick);
    externalCountTab.on('click', handleExternalTabClick);
    mobileExternalCountTab.on('click', handleExternalTabClick);
    consecutiveMeetingTab.on('click', handleConsecutiveTabClick);
    mobileConsecutiveCountTab.on('click', handleConsecutiveTabClick);
    exportBtn.on('click', exportSessions);
  }

  function exportSessions(event) {
    event.preventDefault();
    event.stopPropagation();
    window.commons.redirectPage(SessionStore.generateExportUrl());
  }

  function handleConsecutiveTabClick(event) {
    event.preventDefault();
    event.stopPropagation();
    commons.redirectPage(envDetails.urlPrefix + Api.ENDPOINTS.consecutive_list_page);
  }

  function handleInternalTabClick(event) {
    event.preventDefault();
    event.stopPropagation();
    commons.redirectPage(envDetails.urlPrefix + Api.ENDPOINTS.meeting_list);
  }

  function handleExternalTabClick(event) {
    event.preventDefault();
    event.stopPropagation();
    commons.redirectPage(envDetails.urlPrefix + Api.ENDPOINTS.external_requests);
  }

  function handleSessionCheckin(event) {
    event.preventDefault();
    event.stopPropagation();
    var session = $(this);
    var sessionUuid = session.closest('.meeting-card').data('uuid');
    var status = session.is(':checked') ? 1 : 0;
    Actions.checkinSession(sessionUuid, status);
  }

  function handleAttendeeCheckin(event) {
    event.preventDefault();
    event.stopPropagation();
    var attendee = $(this);
    var session = attendee.closest('.meeting-card');
    var sessionUuid = session.data('uuid');
    var attendeeUuid = attendee.data('uuid');
    var attendeeType = attendee.data('attendee_type');
    var status = attendee.is(':checked') ? 1 : 0;
    if (status === 1) {
      session.find('.checkin_meeting').prop('checked', true);
    }
    Actions.checkinAttendee(sessionUuid, attendeeUuid, status, attendeeType);
  }

  function fetchMoreSessionsCheckin() {
    if (Store.getCurrentPage() <= Store.getTotalPages()) {
      Actions.fetchSessionCheckinList(Store.getCurrentPage());
    }
  }

  function handleToggleView() {
    var elem = $(this);
    var type = elem.data('switch-type');
    if (type !== 'checkin') {
      var redirectUrl = envDetails.urlPrefix + Api.ENDPOINTS.session_list;
      commons.redirectPage(redirectUrl);
      commons.setItem('session-list', type);
    }
  }

  return {
    init: init
  };
}();

module.exports = CheckinHandler;

/***/ }),

/***/ "./app/scripts/Session/handler.js":
/*!****************************************!*\
  !*** ./app/scripts/Session/handler.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Actions = __webpack_require__(/*! ./actions */ "./app/scripts/Session/actions.js");
var Store = __webpack_require__(/*! ./store */ "./app/scripts/Session/store.js").SessionStore;
var Api = __webpack_require__(/*! common_api */ "./app/scripts/commons/jiffle/api.js");

var SessionHandler = function () {

  var sessionListContainer = $('#meeting_list');
  //var externalCountTab = $('.tab_external');
  //var mobileExternalCountTab = $('.mobile_tab_external');
  var internalCountTab = $('.tab_internal');
  var mobileInternalCountTab = $('.mobile_tab_internal');
  var sessionCountTab = $('.tab_session');
  var mobileSessionCountTab = $('.mobile_tab_session');
  var internalSelectAll = $(".manage-internal-selectall");
  var exportBtn = $('#export');
  var currentViewStyle;
  var consecutiveMeetingTab = $('.tab_consecutive_meeting');
  var mobileConsecutiveCountTab = $('.mobile_tab_consecutive_meeting');
  var notificationModal = $(".notification-modal");
  var itemSize = {
    'tile-view': 'col-md-3 col-sm-4',
    'list-view': 'col-md-12'
  };

  var storeHandlers = {
    sessionlisting: handelSessionList,
    sessionNominations: handleSessionNominations
  };

  function init() {

    $(".navbar-form").hide();
    $("li.filter-dropdown").hide(); // vinay: hiding since there is no search and filters for sessions yet.
    sessionListContainer.on('click', '#session_click', getNominations);
    mobileInternalCountTab.removeClass('active');
    //mobileExternalCountTab.removeClass('active');
    internalCountTab.removeClass('active');
    //externalCountTab.removeClass('active');
    sessionCountTab.addClass('active');
    mobileSessionCountTab.addClass('active');
    commons.setItem('meeting-list', 'grid');
    internalSelectAll.addClass("hide");
    setUpListeners();
    Store.listen(function (data) {
      var func = storeHandlers[data.type];
      if (func) {
        func(data);
      }
    });

    Actions.fetchSessions(1);
    setView();
  }

  function setView() {
    $('a[data-switch-type]').removeClass('active');
    if (commons.getItem('session-list') === 'list') {
      currentViewStyle = 'list-view';
      $('a[data-switch-type="list"]').addClass('active');
    } else {
      currentViewStyle = 'tile-view';
      $('a[data-switch-type="grid"]').addClass('active');
    }
  }

  function handleConsecutiveTabClick(event) {
    event.preventDefault();
    event.stopPropagation();
    commons.redirectPage(envDetails.urlPrefix + Api.ENDPOINTS.consecutive_list_page);
  }

  function setUpListeners() {

    attachCommonUIListeneres();

    internalCountTab.on('click', handleInternalTabClick);
    mobileInternalCountTab.on('click', handleInternalTabClick);
    //externalCountTab.on('click', handleExternalTabClick);
    //mobileExternalCountTab.on('click', handleExternalTabClick);
    $('a[data-switch-type]').on('click', handelViewToggle);
    exportBtn.on('click', exportSessions);
    consecutiveMeetingTab.on('click', handleConsecutiveTabClick);
    mobileConsecutiveCountTab.on('click', handleConsecutiveTabClick);
    sessionCountTab.on('click', handleSessionTabClick);
    mobileSessionCountTab.on('click', handleSessionTabClick);
  }

  function attachCommonUIListeneres() {

    $(window).infiniteScroll({
      offset: 200,
      callback: fetchMoreSessions
    });
  }

  function getNominations(e) {
    var sessionUuid = $(this).data("uuid");
    Actions.fetchSessionNominations({ session_uuid: sessionUuid });
  }

  function exportSessions(e) {
    e.preventDefault();
    e.stopPropagation();
    window.commons.redirectPage(Store.generateExportUrl());
  }

  function hideNominationsList() {
    $("#group-nominatoin-list").modal('hide');
  }

  function showNominationsList() {
    $("#group-nominatoin-list").modal('show');
  }

  function handleSessionNominations(apiResponse) {
    var nominationLabel = commonStore.getCustomLabels()['nomination_custom_label'];
    var nominations = apiResponse.data.data.nominations,
        redirectionPath;
    if (nominations.length === 0) {
      if (apiResponse.data.data.show_message) {
        notificationModal.notificationModal({ title: i18n.t('no_nominations_header', { nominationLabel: nominationLabel }), body: apiResponse.data.data.message, class: 'blue' });
      } else {
        var sessionParams = "";
        var sessionObj = Store.getSessionObj(apiResponse.data.data.session_uuid);
        if (!_.isEmpty(sessionObj)) {
          sessionParams = "&session_uuid=" + sessionObj.uuid + "&track_uuid=" + sessionObj.track.uuid + "&topic_uuid=" + sessionObj.topic.uuid;
        }
        commons.redirectPage(envDetails.urlPrefix + Api.ENDPOINTS.meeting_request_path + '?' + $.param({
          activity_uuid: apiResponse.data.data.activity_uuid
        }) + sessionParams);
      }
    } else {
      var editable_nomination;
      $(nominations).each(function (i, value) {
        if (value.can_edit) {
          editable_nomination = value;
          return false;
        }
      });
      if (editable_nomination) {
        if (typeof jiffle !== 'undefined') {
          var redirectionPath = window.location.origin + Api.ENDPOINTS.jn_book_nomination;
          var search = window.location.search;
          var modeQ = '&mode=edit';
          search = search + "&nomination=" + editable_nomination.uuid;
          redirectionPath = redirectionPath + search + modeQ;
        } else {
          redirectionPath = envDetails.urlPrefix + Api.ENDPOINTS.group_nomination_edit;
          redirectionPath = redirectionPath.replace('{{uuid}}', editable_nomination.uuid);
        }
      } else {
        if (typeof jiffle !== 'undefined') {
          var redirectionPath = window.location.origin + Api.ENDPOINTS.jn_view_nomination;
          var search = window.location.search;
          var modeQ = '&mode=view';
          search = search + "&nomination=" + nominations[0].uuid;
          redirectionPath = redirectionPath + search + modeQ;
        } else {
          redirectionPath = envDetails.urlPrefix + Api.ENDPOINTS.group_nomination_view;
          redirectionPath = redirectionPath.replace('{{uuid}}', nominations[0].uuid);
        }
      }
      commons.redirectPage(redirectionPath);
    }
  }
  function handelSessionList(data) {
    displayMeetings(data.data);
    updateMeetingCount(data.data.total, data.data.totalExternal, data.data.totalInternal, data.data.totalConsec);
  }

  function handelViewToggle(data) {
    var El = $(this);
    var isCheckInClick = El.data('switch-type') === 'checkin' ? true : false;

    if (isCheckInClick) {
      var checkinUrl = envDetails.urlPrefix + Api.ENDPOINTS.checkin_sessions_list;
      window.commons.redirectPage(checkinUrl);
    } else {
      $('a[data-switch-type]').removeClass('active');
      El.addClass('active');
      var viewStyle = { 'grid': 'tile-view', 'list': 'list-view' }[El.data("switch-type")];
      currentViewStyle = viewStyle;
      var listHolder = sessionListContainer.find('.meeting-list');
      listHolder.removeClass("tile-view list-view").addClass(viewStyle);
      listHolder.find("div.item").removeClass("col-md-3 col-sm-4 col-md-12").addClass(itemSize[viewStyle]);
    }
  }

  function displayMeetings(data) {

    var template = __webpack_require__(/*! Templates/meeting/session-list */ "./templates/meeting/session-list.hbs");
    var sessions = _.cloneDeep(data.sessions);
    sessions.map(function (session) {
      session.remainingCount = session.capacity - session.not_declined_user_count;
      session.sessionDate = moment(session.start_time).toDate().toMediumDate();
      session.startTime = moment(session.start_time, "YYYY-MM-DD hh:mm A").format("hh:mm A");
      session.endTime = moment(session.end_time, "YYYY-MM-DD hh:mm A").format("hh:mm A");
    });
    sessionListContainer.html(template({
      sessions_list: sessions,
      toggle_state: {
        viewStyle: currentViewStyle,
        tileSize: itemSize[currentViewStyle]
      }
    }));
  }

  function updateMeetingCount(count, externalCount, internalCount, consecCount) {

    $(".tab_session").find(".meeting_count").text(count).siblings('span.title_text').html(i18n.t(count === 1 ? "SESSION" : "SESSIONS", { count: '' }));
    $(".mobile_tab_session").find(".meeting_count").text(count).siblings('span.title_text').html(i18n.t(count === 1 ? "SESSION" : "SESSIONS", { count: '' }));
    $(".mobile_tab_internal").find(".meeting_count").text(internalCount).siblings('span.title_text').html(i18n.t(internalCount === 1 ? "MEETING" : "MEETINGS", { count: '' }));
    $(".tab_internal").find(".meeting_count").text(internalCount).siblings('span.title_text').html(i18n.t(internalCount === 1 ? "MEETING" : "MEETINGS", { count: '' }));
    $(".mobile_tab_external").find(".meeting_count").text(externalCount).siblings('span.title_text').html(i18n.t(externalCount === 1 ? "REQ" : "REQS", { count: '' }));
    $(".tab_external").find(".meeting_count").text(externalCount).siblings('span.title_text').html(i18n.t(externalCount === 1 ? "REQUEST" : "REQUESTS", { count: '' }));
    consecutiveMeetingTab.find(".meeting_count").text(consecCount).siblings('span.title_text').html(i18n.t(consecCount === 1 ? "consecutive_meeting" : "consecutive_meetings", { count: '' }));
    mobileConsecutiveCountTab.find(".meeting_count").text(consecCount).siblings('span.title_text').html(i18n.t(consecCount === 1 ? "consecutive_meetings" : "consecutive_meetings", { count: '' }));
  }

  function handleInternalTabClick(event) {
    event.preventDefault();
    event.stopPropagation();

    if (typeof jiffle !== 'undefined') {
      var search = window.location.search;
      newPage = Api.ENDPOINTS.apex_jnmeetings + search;
      window.commons.redirectPage(newPage);
    } else commons.redirectPage(envDetails.urlPrefix + '/meeting_list');
  }

  function handleSessionTabClick(event) {
    event.preventDefault();
    event.stopPropagation();

    if (typeof jiffle !== 'undefined') {
      var search = window.location.search;
      newPage = Api.ENDPOINTS.apex_jnsessions + search;
      window.commons.redirectPage(newPage);
    } else window.commons.redirectPage(envDetails.urlPrefix + '/session_list');
  }

  /*  function handleExternalTabClick(event) {
      event.preventDefault();
      event.stopPropagation();
  
      window.location.href = envDetails.urlPrefix + '/external_requests';
    }*/

  function fetchMoreSessions() {
    if (Store.getCurrentPage() <= Store.getTotalPageCount()) {
      Actions.fetchSessions(Store.getCurrentPage());
    }
  }

  return {
    init: init
  };
}();

module.exports = SessionHandler;

/***/ }),

/***/ "./app/scripts/Session/store.js":
/*!**************************************!*\
  !*** ./app/scripts/Session/store.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var SessionActions = __webpack_require__(/*! ./actions */ "./app/scripts/Session/actions.js");
var Api = __webpack_require__(/*! common_api */ "./app/scripts/commons/jiffle/api.js");

var SessionStore = Reflux.createStore({

  init: function init() {
    this.listenToMany(SessionActions);

    this.sessions = [];
    this.fetching = false;
    this.per_page_session_count = 10;
    this.current_page = 1;
    this.total_pages = 0;
  },

  generateExportUrl: function generateExportUrl() {
    var prefix = envDetails['urlPrefix'] || "";
    return [prefix, Api.ENDPOINTS.session_export].join("");
  },

  onFetchSessions: function onFetchSessions(page_no, per_page) {

    if (this.getFetchState() == false) {
      this.updateFetchState(true);
      var promise = Api.fetch({
        url: Api.ENDPOINTS.sessions_list,
        data: {
          page: page_no,
          per_page: per_page || this.per_page_session_count
        }
      });

      promise.then(function (apiResponse) {

        this.updateFetchState(false);
        this.setCurrentPage(this.getCurrentPage() + 1);
        this.setTotalPageCount(Math.ceil(apiResponse.data.sessions.total_entries / this.per_page_session_count));

        this.sessions = this.sessions.concat(apiResponse.data.sessions.items);

        this.trigger({
          type: 'sessionlisting',
          data: {
            sessions: this.sessions,
            total: apiResponse.data.sessions.total_entries,
            totalExternal: apiResponse.data.external_requests_count,
            totalInternal: apiResponse.data.internal_meetings_count,
            totalConsec: apiResponse.data.consecutive_meetings_count
          }
        });
      }.bind(this));

      promise[promise.fail ? 'fail' : 'catch'](function (apiResponse) {
        this.updateFetchState(false);
      }.bind(this));
    }
  },

  getFetchState: function getFetchState() {
    return this.fetching;
  },
  updateFetchState: function updateFetchState(state) {
    this.fetching = state;
  },
  getCurrentPage: function getCurrentPage() {
    return this.current_page;
  },
  setCurrentPage: function setCurrentPage(page_no) {
    this.current_page = page_no;
  },
  getTotalPageCount: function getTotalPageCount() {
    return this.total_pages;
  },
  setTotalPageCount: function setTotalPageCount(count) {
    this.total_pages = count;
  },
  getSessionObj: function getSessionObj(session_uuid) {
    return _.find(this.sessions, function (session) {
      return session.uuid === session_uuid;
    });
  },

  onFetchSessionNominations: function onFetchSessionNominations(params) {
    params = _.extend(params, { page: 1, per_page: 500 });
    if (typeof nominationInfo != "undefined" && nominationInfo.request.session.uuid) {
      params = _.extend(params, { session_uuid: nominationInfo.request.session.uuid });
    }
    var promise = Api.fetch({
      url: Api.ENDPOINTS.session_nominations,
      data: params
    });

    promise.then(function (response) {
      response.data.session_uuid = params['session_uuid'];
      this.trigger({ type: 'sessionNominations', data: response });
    }.bind(this));

    promise[promise.fail ? 'fail' : 'catch'](function (data) {
      var response = data.responseJSON;
      this.trigger({ action: 'onCreateSessionFailed', payload: response });
    }.bind(this));
  }
});

var CheckinStore = Reflux.createStore({
  init: function init() {
    this.listenToMany(SessionActions);
    this.perPage = 10;
    this.totalPages;
    this.currentPage = 1;
    this.isFetching = false;
    this.sessions = [];
  },

  onFetchSessionCheckinList: function onFetchSessionCheckinList(pageNo) {
    var fetchState = this.getFetchState();

    if (fetchState === false) {
      this.setFetchState(true);
      var promise = Api.fetch({
        url: Api.ENDPOINTS.session_checkin_list,
        data: {
          page: pageNo,
          per_page: this.perPage
        }
      });
      promise.done(function (apiResponse) {
        this.setData(apiResponse.data.sessions);
        this.setTotalPages(apiResponse.data.total_entries);
        this.setCurrentPage(this.getCurrentPage() + 1);

        this.trigger({
          action: 'onSessionCheckinListSuccess',
          payload: {
            data: this.getData(),
            totalInternal: apiResponse.data.internal_request_count || 0,
            totalSessions: apiResponse.data.sessions_count || 0,
            totalExternal: apiResponse.data.external_requests_count || 0,
            totalConsecMeeting: apiResponse.data.consecutive_meetings_count || 0
          }
        });
        this.setFetchState(false);
      }.bind(this));
    }
  },

  onCheckinSession: function onCheckinSession(sessionUuid, status) {
    var promise = Api.update({
      url: Api.ENDPOINTS.update_checkin_status,
      type: "put",
      data: {
        user_uuid: '',
        object_type: "Session",
        meeting_uuid: sessionUuid,
        status: status
      }
    });
    promise.done(function (apiResponse) {}.bind(this));
  },

  onCheckinAttendee: function onCheckinAttendee(sessionUuid, attendeeUuid, status, attendeeType) {
    var promise = Api.update({
      url: Api.ENDPOINTS.update_checkin_status,
      type: "put",
      data: {
        object_type: "Session",
        user_uuid: attendeeUuid,
        meeting_uuid: sessionUuid,
        status: status
      }
    });

    promise.done(function (apiResponse) {}.bind(this));
  },

  setData: function setData(sessions) {
    this.sessions = this.sessions.concat(sessions);
  },

  getData: function getData() {
    return this.sessions;
  },

  setTotalPages: function setTotalPages(totalEntries) {
    this.totalPages = totalEntries % this.perPage == 0 ? totalEntries / this.perPage : Math.floor(totalEntries / this.perPage) + 1;
  },

  setCurrentPage: function setCurrentPage(page) {
    this.currentPage = page;
  },

  getCurrentPage: function getCurrentPage() {
    return this.currentPage;
  },

  setFetchState: function setFetchState(state) {
    this.isFetching = state;
  },

  getTotalPages: function getTotalPages() {
    return this.totalPages;
  },

  getFetchState: function getFetchState() {
    return this.isFetching;
  }
});

module.exports = {
  SessionStore: SessionStore,
  CheckinStore: CheckinStore
};

/***/ }),

/***/ "./app/scripts/commons/jiffle/api.js":
/*!*******************************************!*\
  !*** ./app/scripts/commons/jiffle/api.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ENDPOINTS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable */

/* global i18n, $, _, FormData, envDetails */
// Note: Add the urls in sorted order
var Api = {
  ENDPOINTS: (_ENDPOINTS = {
    accept_meeting: '/meeting_request/{uuid}/accept_meeting',
    activate_event: '/event/activate',
    activate_room: '/room/{{uuid}}/active',
    activate_user: '/users/UUID/active',
    activity_details: '/activities/{uuid}',
    adapters: '/adapter_ui/integration_adapters',
    add_attendee_to_meeting: '/meetings/add_attendees',
    add_new_location: '/location/{event_uuid}',
    add_supported_api: '/adapter_ui/supported_apis/map_to_integration',
    alert_details_fetch: '/alerts/meeting_meta',
    alert_fetch: '/alerts',
    all_meeting_types: '/meeting_types/index',
    apex_jnlistagenda: '/apex/JNBriefings',
    apex_jnmeetings: '/apex/JNMeetings',
    api_map_or_add_user: { url: '/api/v1/users/book_meeting_create', errorConfig: { handler: 'detailedErrorHandler' } },
    api_register_user: { url: '/api/v1/users', errorConfig: { handler: 'detailedErrorHandler' } },
    api_update_user_event_settings: { url: '/api/v1/user/{{uuid}}/update_settings', errorConfig: { handler: 'detailedErrorHandler', custom_title: 'Cannot Update' } },
    api_update_user: { url: '/api/v1/users/{{uuid}}', errorConfig: { handler: 'detailedErrorHandler', custom_title: 'We’re Sorry!' } },
    appointment_filter_options: '/appointment_filter_options',
    approve_external_request: '/external_request/{uuid}/approve',
    approve_meeting: '/meeting_request/approve_meetings',
    approved_meeting_count: { url: '/approved_meeting_count', errorConfig: { handler: 'summuryErrorHandler' } },
    auto_reminder_setting: '/auto_reminder_setting',
    availability_fetch_ebc: '/configure/initial_availabilities',
    availability_fetch: '/meeting_type/availabilities',
    availability_update: '/configure/update_initial_availabilities',
    block_update: '/calendar/edit_block',
    briefing_centre_long_day: '/bcs/get_long_day',
    briefing_centre: '/bc',
    briefing_custom_forms: '/meeting_type/briefing_custom_forms',
    briefing_details: '/briefing/{briefing_uuid}',
    bulk_approve_mappings: '/appointments/approve',
    bulk_approve_meetings: '/meeting_request/approve_meetings',
    bulk_cancel_mappings: '/appointments/cancel',
    bulk_cancel_meetings: '/meeting_request/cancel_meetings',
    bulk_endorse_users: { url: '/api/v1/users/set_endorsed', errorConfig: { handler: 'detailedErrorHandler' } },
    bulk_reinvite_users: '/meeting_request/bulk_reinvite',
    bulk_set_mm_only_flag: '/api/v1/users/set_mm_only_flag',
    bulk_sync_ext_cal_flag: '/api/v1/users/update_cis_details',
    bulk_relax_sfdc_only_request_meeting: '/api/v1/users/set_relax_sfdc_only_request_meeting',
    bulk_show_as_external_attendee: { url: '/api/v1/users/set_show_as_ext', errorConfig: { handler: 'detailedErrorHandler' } },
    calendar_availability: '/meeting_request/calendar',
    calendar_user_availability: '/calendar/users',
    can_attend_session: '/can_attend_session',
    cancel_external_request: { url: '/external_request/{uuid}/cancel', errorConfig: { handler: 'detailedErrorHandler' } },
    cancel_meeting: '/meeting_request/{meeting_uuid}/cancel_meeting',
    check_attendee_availability: { url: '/api/v1/users/{uuid}/availability' },
    checkin_consecutive_meetings_list: '/checkin_consecutive_meetings',
    checkin_list_filters: '/checkin/meeting_filters',
    checkin_meetings_list: '/checkin_meetings',
    checkin_meetings: '/checkin_list',
    checkin_sessions_list: '/checkin_sessions',
    checkin_users: '/checkin/toggle_checkin',
    cis_service: '/cis_service',
    companies_list: '/companies/search',
    company_fetch: '/company',
    concierge_services_create: '/concierge_services',
    concierge_services_update: '/concierge_services/{uuid}',
    config_auto_remind: '/configure/auto_remind',
    config_history: { url: '/configuration/history_list', errorConfig: { handler: 'detailedErrorHandler' } },
    config_integration_update: '/configure/integration_update',
    config_integration: '/configure/integration',
    config_notification_update: '/configure/notification_update',
    config_notification: '/configure/notification',
    config_topic_update: '/config/update_topic',
    config_topic: '/configure/topic',
    consecutive_list_page: '/consecutive_meetings/list',
    consecutive_meeting_list: { url: '/consecutive_meetings', errorConfig: { handler: 'detailedErrorHandler' } },
    consecutive_meetings_details: { url: '/consecutive_meetings/{uuid}/edit_consecutive_meeting', errorConfig: { handler: 'detailedErrorHandler' } },
    consecutive_meetings_edit_path: '/consecutive_meetings/{uuid}/edit',
    consecutive_meetings_view_path: '/consecutive_meetings/{uuid}/view',
    copy_calendar_settings: '/configure/copy_calendar',
    copy_form_settings: '/configure/copy_form',
    copy_meeting_settings: '/configure/copy_settings',
    copy_notification_settings: '/configure/copy_notification_templates',
    create_consecutive_meetings: '/consecutive_meetings',
    create_external_request: '/external_request/create',
    create_group_nomination: '/group_nomination/create',
    create_integration_user: function create_integration_user(uuid) {
      return '/adapter_ui/integration/' + uuid + '/user';
    },
    integration_user: '/integrations/integration_user',
    create_mapping: '/container_mapping/{activity_uuid}/create',
    create_or_update_track: { url: '/tracks', errorConfig: { handler: 'detailedErrorHandler' } },
    create_self_nomination: { url: '/session/{{sessionUuid}}/create_self_nomination', errorConfig: { handler: 'detailedErrorHandler' } },
    create_session: '/session/create',
    create_tag_clouds: '/tag_cloud',
    custom_field_options: '/custom_form/{UUID}/search',
    custom_form_details: '/custom_form_details',
    customer_availability: '/calendar/companies',
    customer_calendar_export: '/calendar/briefings_center/export',
    custom_labels: { url: '/custom_labels_configurations', errorConfig: { handler: 'detailedErrorHandler' } },
    decline_meeting: '/meeting_request/{uuid}/decline_meeting',
    default_meeting_location_entities: '/event/set_default_meeting_location',
    delete_mapping: '/container_mapping/{{uuid}}/delete',
    delete_location_preference: { url: '/meeting_request/{{uuid}}/delete_loc_pref_proposal', errorConfig: { handler: 'detailedErrorHandler' } },
    demand_report_export: '/api/v1/meetings/ondemand',
    demand_reports: '/reports/demand_report',
    detailed_custom_labels: { url: '/detailed_custom_labels_configurations', errorConfig: { handler: 'detailedErrorHandler' } },
    disable_saved_report: '/user_template/disable/{{uuid}}',
    dismiss_alert: '/alerts/dismiss',
    dismiss_notification: '/notifications/dismiss',
    domain_validation: '/domains/validate',
    domains_valid: '/domains/valid',
    double_booked_resources: '/meeting_request/double_booked_resources',
    download_agenda_item_template_url: '/meeting_request/csv_template',
    user_topic_mapping_template_url: '/api/v1/users/user_topic_mapping/csv_template',
    edit_track: '/tracks/{uuid}/edit',
    enable_double_book_users: { url: '/api/v1/users/enable_double_booking', errorConfig: { handler: 'detailedErrorHandler' } },
    event_access_settings: '/event/roles_event_visibility',
    event_config_export: '/configuration/export',
    event_config_for_user_calendar: '/user_calendar/configurations',
    event_config_import: { url: '/configuration/import', errorConfig: { handler: 'detailedErrorHandler' } },
    event_config: '/event/configurations',
    event_configurations: '/event/{event_uuid}/configurations',
    event_details: '/event_info',
    event_ebc_configurations: '/event/ebc_configurations',
    event_home: 'event/home',
    event_new: '/event/new',
    event_room_cal_path: 'calendar',
    event_user_cal_path: 'user_calendar',
    event_user_filters: '/users/filter_options',
    events_info: '/events',
    events: '/events',
    expert_users: '/mapping/experts',
    export_meeting_checkin: '/reports/meetings_checkin/export.xlsx',
    export_review: '/reviewable/export.csv',
    export_summary_report: '/guided_tour/surveys',
    export_surveys: '/survey/{UUID}/export_surveys',
    ext_enabled_fetch_form_settings: '/external_widget_activities',
    external_attendees: '/users/external',
    external_meetings_list_filters: '/external_requests/filters',
    external_request_dates: '/event_dates',
    external_request_export: '/external_requests/export',
    external_requests: '/external_requests',
    external_widget_sessions: '/external_request/nomination/sessions',
    external_widget_signup_session: '/session/{uuid}/create_external_self_nomination',
    external_widget_topics: '/external_widget/tracks/{uuid}/topics',
    external_widget_tracks: '/external_widget/tracks',
    facilities_list: '/facilities',
    feature_enable_ebc: '/feature_toggle/enable_ebc',
    fetch_active_events: '/active_events',
    fetch_activities: '/user_meeting_types/list',
    fetch_activity_list: '/activities',
    fetch_activity_manager: { url: '/user_settings/{{uuid}}/activity', errorConfig: { handler: 'detailedErrorHandler' } },
    fetch_activity_settings: '/configure/activity_settings',
    fetch_analytics_configs: '/analytics_dashboard/config',
    fetch_archived_event_meeting_analytics: '/archived_events/analytics',
    fetch_archived_events_list: '/event_list_by_type/archived',
    fetch_archived_reports: '/archived_events/all_reports',
    fetch_available_meeting_types: '/fetch_available_meeting_types',
    fetch_booking_analytics: '/analytics/booking',
    fetch_briefing_workflow: '/configure/briefing_settings',
    fetch_calendar_settings: '/configure/calendar_settings',
    fetch_changable_meeting_types: '/fetch_transfer_meeting_types/{meeting_uuid}',
    fetch_concierge_form: '/concierge_services/custom_forms',
    fetch_concierge_notification_settings: '/concierge_services/notification_settings',
    fetch_concierge_services: '/concierge_services',
    fetch_consecutive_meeting_form_settings: '/configure/consecutive_meeting/form_settings',
    fetch_consecutive_meeting_notification_settings: '/configure/consecutive_meeting/notification_settings',
    fetch_customer_info_values: '/importable_entity_info',
    fetch_customers_analytics: '/analytics/customers',
    fetch_ebc_form: '/briefing_custom_form/get_fields',
    fetch_existing_meetings: '/badge_scan_meetings',
    fetch_external_meeting_request: '/external_requests/list',
    fetch_external_user_form_fields: '/fetch_sfdc_contacts_fields',
    fetch_form_settings: '/configure/form_settings',
    fetch_form: '/custom_form/get_fields',
    fetch_guided_tour_integration_fields: '/guided_tour/integration_fields',
    fetch_integration_block_fields: '/integration_block_fields',
    fetch_integration_meeting_fields: '/integration_meeting_fields',
    fetch_integration_survey_fields: '/integration_survey_fields',
    fetch_invitees_analytics: '/analytics/invitees',
    fetch_location_configs: '/configure/location',
    fetch_mapped_meeting_type_for_role: { url: '/users/roles_activities', errorConfig: { handler: 'detailedErrorHandler' } },
    fetch_mapping_details: '/mappings_details',
    fetch_mapping_filters: '/appointment_filters',
    fetch_mapping_rule_types: '/adapter_ui/fetch_integration_rules',
    fetch_mappings: '/mapping_module_count',
    fetch_master_supported_apis: '/adapter_ui/supported_apis',
    fetch_meeting_attendee: '/users/copy_attendees',
    fetch_meeting_count: '/activity_module_count',
    fetch_meeting_data_for_reports: '/users/meetings',
    fetch_meeting_details: '/activity_details',
    fetch_meeting_filters: '/reports/meeting_filters',
    fetch_meeting_list_copy_attendee: '/importable_entity_info/meeting_info_attendee',
    fetch_meeting_list_customer_info: '/importable_entity_info/customer_info_form',
    fetch_meeting_reports_header: '/headers',
    fetch_meeting_reports: '/api/v1/meetings/ondemand',
    fetch_meeting_type_analytics: { url: '/analytics/meetings_by_type', errorConfig: { handler: 'detailedErrorHandler' } },
    fetch_meeting_type_durations: '/calendar/available_meeting_types',
    fetch_meeting_types: '/meeting_types/list',
    fetch_meetings_analytics: '/analytics/meetings',
    fetch_minimum_timeslot: '/setting/minimum_timeslot',
    fetch_nomination_detail: '/nomination/{UUID}/{action}.json',
    fetch_notification_settings: '/configure/notification_settings',
    fetch_portal_custom_form: '/forms',
    fetch_preview_mapping_detail: '/container/{UUID}/details.json',
    fetch_preview_meeting_detail: '/meeting_request/{UUID}/{action}.json',
    fetch_remote_entities: '/fetch_remote_entities',
    fetch_requestor_email: '/fetch_requestor_email',
    fetch_roles_analytics: '/analytics/roles',
    fetch_rooms_analytics: '/analytics/rooms',
    fetch_scanned_users: '/fetch_scanned_users',
    fetch_scanners_name: '/scanners',
    fetch_standard_report: '/reports/standard_report',
    fetch_survey_template: '/configure/consolidated_survey_mail_settings',
    fetch_surveys: '/surveys',
    fetch_tag_configs: '/configure/tag',
    fetch_tag_entity: '/tags/{{uuid}}/{{entity}}',
    fetch_topics: '/topics',
    fetch_track_topics: '/tracks/{{uuid}}/topics',
    fetch_track_activities: '/tracks/{{uuid}}/activities',
    fetch_transferable_meeting_types: '/configure/change_meeting_type_links',
    fetch_unmapped_topic_entity: '/get_meetings_with_unmapped_topic_entity',
    fetch_update_briefing_notification_settings: '/configure/briefing_notification_settings',
    fetch_user_details: '/users/{{uuid}}',
    fetch_user_field_mappings: '/adapter_ui/fetch_integration_configs',
    fetch_user_form_rules: '/user_form_fields',
    fetch_user_notification: '/teddy/notifications/settings',
    fetch_user_topics: '/user_topics',
    fetch_valid_mapping_Times: '/mappings_valid_start_times',
    fetch_conference_list: '/hangout/conferences/enabled_conferences',
    fetch_conference_link: '/hangout/conferences/conference_link',
    fetch_resource_data: { url: '/api/v1/resource_data/fetch', errorConfig: { handler: 'detailedErrorHandler' } },
    fetch_user_custom_field_mapping: '/forms/user/ext_req_config',
    file_upload_url: '/attachment/{type}',
    fill_bulk_consent: { url: '/api/v1/users/set_consent_details', errorConfig: { handler: 'detailedErrorHandler' } },
    get_announcements: '/setting/announcement',
    get_booth_tour_details: '/booth_tour/list',
    get_briefing_filters: '/bc/{BCUUID}/briefing/filters',
    get_briefing_report_options: '/bc/{BCUUID}/briefing/filter_options',
    get_checkin_options: '/checkin_filters/filter_options',
    google_city_search: '/google_client/geo_places',
    google_time_zone_search: '/google_client/geo_timezone',
    set_user_sec_time_zone: '/set_user_timezone',
    get_ebc_role_privileges: '/all_ebc_privileges',
    get_self_serve_privileges: '/self_serve_privileges',
    get_ext_meeting_options: '/external_requests/filter_options',
    get_external_req_details: '/external_request/{uuid}/meeting_info',
    get_external_request: '/external_request/{uuid}/view',
    get_meeting_options: '/meeting_filters/filter_options',
    get_mm_list: '/users/managers',
    get_ondemand_users_list: '/users/ondemand_users',
    get_report_options: '/reports_filters/filter_options',
    get_reviews: '/reviewable/reviews',
    get_swappable_room_list: '/swap_room/list',
    get_tag_clouds: '/tag_cloud',
    get_topics: '/get_topics',
    get_user_preferences: '/users/{uuid}/user_preference',
    group_nomination_edit: '/nomination/{{uuid}}/edit',
    group_nomination_view: '/nomination/{{uuid}}/view',
    inactivate_rooms: '/rooms/inactive',
    inactivate_users: '/api/v1/users/inactive',
    integration_configurations_details: '/adapter_ui/integration_configurations',
    integration_configurations_schema: '/adapter_ui/integration_configurations_schema',
    integration_external_user_info: '/integration_external_user/{user_ref_id}',
    integration_field_mappings: '/integration/field_mappings',
    integration: '/adapter_ui/integrations',
    internal_attendees: '/users/internal',
    jn_book_meeting: '/apex/JNBookMeeting',
    jn_view_book_meeting: '/apex/JNViewMeeting',
    list_briefings_agenda: '/briefing/list_briefings{QUERY_PARAMS}#/list_agenda',
    list_tracks: '/tracks/list',
    mail_template_type_entities_get: '/mail_action/get_associated_entities',
    mail_template_type_get: '/mail_actions',
    manage_external_users: '/manage_external_users',
    manage_users: '/manageusers',
    manual_reminder_user: '/manual_reminders_users',
    mappable_grouping_users: '/reports/all_users',
    mappable_requestors: '/fetch_requestors',
    mappable_users: '/common_utils/fetch_mappable_users',
    mapped_events: '/mappable_events',
    mapping_list: '/container_mapping/list',
    mapping_page: '/mapping_list',
    mapping_valid_durations: '/mappings_valid_durations',
    mappings_export: '/exporter/appointment',
    meeting_availability: '/meeting_request/calendar',
    meeting_create: '/meeting_request/create',
    meeting_drag: '/calendar/relocate',
    meeting_fetch: '/meeting_request/{{uuid}}/show',
    meeting_get_config: '/configure/{:uuid}/meeting_type',
    meeting_get_settings: '/setting/activity',
    meeting_history: '/meeting_request/{uuid}/history',
    meeting_host_count: '/get_meetings_with_meeting_host',
    meeting_list: '/meeting_list',
    meeting_notifications: '/meeting_notifications',
    meeting_request_edit_path: '/meeting_request/{uuid}/edit',
    meeting_request_export: '/meeting_request/export',
    meeting_request_path: '/meeting_request/new',
    meeting_request_view_path: '/meeting_request/{uuid}/view',
    meeting_set_config: '/configure/{:uuid}/meeting_type_update',
    meeting_set_setting: '/setting/activity_update',
    meeting_type_create: '/meeting_type/create',
    meeting_type_update: '/meeting_type/{uuid}/update',
    meeting_types_of_consecutive_sub_meetings: '/consecutive_meetings/meeting_types',
    meeting_types: '/meeting_types',
    meetings_list_filters: '/meeting_request/meeting_filters',
    meetings_list: '/meeting_requests',
    miscellaneous_report_export: '/reports/miscellaneous/{type}',
    non_event_configurations: '/calendar/configurations',
    notification_fetch: '/notifications',
    on_behalf_actions: '/meeting_request/on_behalf_actions',
    portal: '/portal',
    print_user_badge: '/print_badge',
    register_user: { url: '/api/v1/register/user', errorConfig: { handler: 'detailedErrorHandler' } },
    reinvite_attendee_to_meeting: '/meeting_request/reinvite',
    reinvite_users: { url: '/api/v1/users/reinvite', errorConfig: { handler: 'summuryErrorHandler' } },
    reject_external_request: '/external_request/{uuid}/reject',
    reject_location_preference: { url: '/meeting_request/{{uuid}}/reject_loc_pref_proposal', errorConfig: { handler: 'detailedErrorHandler' } },
    reminder_notif_settings: '/reminders/all/templates',
    remove_from_event: '/users/UUID/inactive',
    remove_uploaded_file_url: '/attachment/{uuid}',
    remove_user_from_event: '/trigger/unmap',
    reorder_meeting_types: '/meeting_type/update_order',
    reports: {
      unified_report_filters: '/reports/unified_report_filters',
      user_list: '/reports/users_list',
      unified_report: '/reports/unified_report.{{format}}',
      fetch_report_template: '/report_templates',
      upload_report_template: '/report_templates/{template_type}/upload',
      update_report_template: '/report_templates/{template_type}/update'
    },
    report_survey_activity_list: '/survey/activity_list',
    reschedule_meeting: '/meeting_request/reschedule',
    partial_meeting_update: '/meeting_request/partial_update',
    reviewer_meeting_filter_options: '/reviewable/meeting_filters/filter_options',
    reviewer_meeting_filters: '/reviewable/meeting_filters',
    reviewer_meetings: '/reviewable/meeting_requests',
    role_create: '/role/create',
    role_disable: '/role/{:uuid}/disable',
    role_enable: '/role/{:uuid}/enable',
    role_get_all_privileges: '/all_privileges',
    role_get_privileges: '/role/{:uuid}/get_privileges',
    role_set_privileges: '/role/{:uuid}/set_privileges',
    role_update: '/role/update',
    roles_fetch: '/roles',
    room_activities: '/activities_rooms',
    room_availability: '/calendar/rooms',
    room_calendar_export: '/calendar/rooms/export',
    room_create: '/room/create',
    room_filters: '/room/filter_options',
    room_make_available: '/calendar/make_available',
    room_make_unavailable: '/calendar/make_unavailable',
    room_unblock: '/calendar/unblock',
    room_update: '/room/update',
    rooms_export: '/exporter/room',
    rooms_list: '/rooms/list',
    save_form: '/custom_form/update',
    save_portal_custom_form: '/form/update',
    save_printer_name: '/save_printer_name',
    save_profile_preferences: '/user_form_fields/update',
    save_user_field_mappings: '/create_or_update_integration_configuration',
    saved_report_details: '/user_template/details',
    send_bulk_survey_meeting_mail: '/meeting_request/send_survey_mail/bulk_action',
    send_requestor_email: { url: '/meeting_request/send_email_to_requestor', errorConfig: { handler: 'detailedErrorHandler' } },
    send_survey_meeting_mail: '/meeting_request/{UUID}/send_survey_mail',
    session_checkin_list: '/session_checkin_list',
    session_export: '/session/export',
    session_list: '/session_list',
    session_nominations: '/group_nominations',
    sessions_list: '/sessions',
    set_announcements: '/setting/announcement_update',
    set_participation_mascal: '/meeting_request/set_participation',
    set_participation: { url: '/meeting_request/set_participation', errorConfig: { handler: 'detailedErrorHandler' } },
    set_reminder: '/set_reminder',
    set_user_cis_status: '/set_user_cis_status/{{id}}',
    set_user_preferences: '/users/{uuid}/user_preference',
    sfdc_custom_labels: { url: '/sfdc_custom_labels_configurations', errorConfig: { handler: 'detailedErrorHandler' } },
    show_in_meeting_external_attendee: { url: '/configure/show_in_meeting_external_attendee', errorConfig: { handler: 'detailedErrorHandler' } },
    single_master_calendar_entity_search: 'master_calendar/{entityType}_search',
    standard_report_export_url: '/users/meetings.pdf?user_uuid={{uuid}}',
    standard_report_generate_url: '/api/v1/standard_report/generate.pdf?user_uuid={{uuid}}',
    survey_create: '/survey_masters',
    survey_responses: 'survey_responses',
    survey_update: '/survey_masters/{uuid}',
    swap_room_submit: '/swap_room/swap',
    system_configurations: '/configurations/system_configuration',
    standard_report_export_by_meeting: '/api/v1/meetings/standard_report.pdf',
    time_zone_url: '/time_zone',
    timeline_data: '/calendar/timeline_data',
    tag_create_or_update: '/tags',
    tag_edit: '/tags/{{uuid}}/edit',
    tag_list: '/tags',
    tag_listing_page: '/tag/listing',
    template_upload_url: 'report_templates/{template_type}/upload'
  }, _defineProperty(_ENDPOINTS, 'time_zone_url', '/time_zone'), _defineProperty(_ENDPOINTS, 'timeline_data', '/calendar/timeline_data'), _defineProperty(_ENDPOINTS, 'topic_upload', '/topics/import'), _defineProperty(_ENDPOINTS, 'topic_configurations', { url: '/topic_configurations', errorConfig: { handler: 'summuryErrorHandler' } }), _defineProperty(_ENDPOINTS, 'track_activities', '/get_track_activities'), _defineProperty(_ENDPOINTS, 'tracks_list', '/tracks'), _defineProperty(_ENDPOINTS, 'trigger_sync', '/trigger_sync'), _defineProperty(_ENDPOINTS, 'trigger_welcome_email_users', { url: '/api/v1/users/send_welcome_email', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'ui_get_settings', '/setting/ui'), _defineProperty(_ENDPOINTS, 'ui_set_setting', '/setting/ui_update'), _defineProperty(_ENDPOINTS, 'update_activity_settings', '/configure/activity_setting'), _defineProperty(_ENDPOINTS, 'update_analytics_configs', { url: '/analytics_dashboard/update_config', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_briefing_workflow', '/configure/briefing_settings'), _defineProperty(_ENDPOINTS, 'update_calendar_settings', '/configure/calendar_settings/{{uuid}}/update'), _defineProperty(_ENDPOINTS, 'update_checkin_status', '/checkin/toggle_checkin'), _defineProperty(_ENDPOINTS, 'update_company_form', '/company/update_company_configs'), _defineProperty(_ENDPOINTS, 'update_concierge_form', '/concierge_services/{{uuid}}/update_custom_form'), _defineProperty(_ENDPOINTS, 'update_concierge_notification_settings', '/concierge_services/{{uuid}}/update_notification_settings'), _defineProperty(_ENDPOINTS, 'update_config_change_meeting_type', '/configure/change_meeting_type'), _defineProperty(_ENDPOINTS, 'update_config', { url: '/config/update_config/{{config_type}}', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_configuration', { url: '/update_configuration', errorConfig: { handler: 'summuryErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_custom_reports', '/user_template/update'), _defineProperty(_ENDPOINTS, 'update_double_booking_config', { url: '/configure/double_booking', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_endorsement_config', { url: '/configure/endorsement', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_event_access', { url: '/api/v1/update_event_access', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_event_visibility', '/role/{{uuid}}/event_visibility'), _defineProperty(_ENDPOINTS, 'update_external_meeting', '/config/external_meeting'), _defineProperty(_ENDPOINTS, 'update_external_request_form', '/update_external_widget'), _defineProperty(_ENDPOINTS, 'update_custom_form', '/update_custom_form'), _defineProperty(_ENDPOINTS, 'update_form_settings', '/configure/form_settings/{{uuid}}/update'), _defineProperty(_ENDPOINTS, 'update_location_configs', '/config/update_location'), _defineProperty(_ENDPOINTS, 'update_mail_template', '/mail_template/update'), _defineProperty(_ENDPOINTS, 'update_manual_scheduling', '/config/manual_scheduling'), _defineProperty(_ENDPOINTS, 'update_mapping_module_config', '/meeting_type/{activity_uuid}/mapping_module_configs'), _defineProperty(_ENDPOINTS, 'update_mapping_module', { url: '/configure/mapping_module', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_virtual_event', { url: '/event/enable_virtual', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'trigger_virtual_event_email', { url: '/event/trigger_mail_virtual_event', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_minimum_timeslot', '/setting/minimum_timeslot_update'), _defineProperty(_ENDPOINTS, 'update_notification_settings', '/configure/notification_setting'), _defineProperty(_ENDPOINTS, 'update_review', '/reviewable/review'), _defineProperty(_ENDPOINTS, 'update_survey_form', '/survey_response/{uuid}'), _defineProperty(_ENDPOINTS, 'update_survey_template', '/configure/consolidated_survey_mail_setting'), _defineProperty(_ENDPOINTS, 'update_tag_configs', '/config/update_tag'), _defineProperty(_ENDPOINTS, 'update_track_config', { url: '/configure/tracks', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_track_label', { url: '/configure/track_label', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_transferable_meeting_types', { url: '/configure/change_meeting_type_links', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'update_user_notif_settings', '/user_setting/notification_setting'), _defineProperty(_ENDPOINTS, 'update_user_notification', '/teddy/notifications/settings'), _defineProperty(_ENDPOINTS, 'update_user_profile', '/user/{{uuid}}'), _defineProperty(_ENDPOINTS, 'update_user_registration', '/company/update_user_register_configs'), _defineProperty(_ENDPOINTS, 'upload_agenda_item_csv', '/meeting_request/import'), _defineProperty(_ENDPOINTS, 'upload_mapping_csv', '/special_appointment/import'), _defineProperty(_ENDPOINTS, 'upload_room_csv', '/room/import'), _defineProperty(_ENDPOINTS, 'upload_user_topic_csv', { url: '/api/v1/users/import_user_topic_mapping', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'upload_ea_attendee_mapping_csv', { url: '/user/bulk_import_ea_attendee_mapping', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'upload_user_csv', { url: '/common_utils/users/import', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'user_block', '/calendar/block'), _defineProperty(_ENDPOINTS, 'user_calendar_export', '/calendar/users/export'), _defineProperty(_ENDPOINTS, 'user_create', '/user/create'), _defineProperty(_ENDPOINTS, 'user_csv_template', '/portal/user/csv_template'), _defineProperty(_ENDPOINTS, 'ea_attendee_mapping', '/user/ea_attendee_csv_template'), _defineProperty(_ENDPOINTS, 'user_export', '/api/v1/users/export'), _defineProperty(_ENDPOINTS, 'ea_attendee_mapping_export', '/user/ea_attendee_mapping_export'), _defineProperty(_ENDPOINTS, 'user_filters', { url: '/common_utils/users/filters', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'user_history', { url: '/user/{uuid}/history', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'user_make_available', '/calendar/make_available'), _defineProperty(_ENDPOINTS, 'user_make_unavailable', '/calendar/make_unavailable'), _defineProperty(_ENDPOINTS, 'user_notif_settings', '/user_setting/notification_settings'), _defineProperty(_ENDPOINTS, 'user_unblock', '/calendar/unblock'), _defineProperty(_ENDPOINTS, 'user_update', '/users/{{uuid}}/update'), _defineProperty(_ENDPOINTS, 'users_events_filters', '/users_events_filters'), _defineProperty(_ENDPOINTS, 'users_events', '/users_events'), _defineProperty(_ENDPOINTS, 'users', { url: '/common_utils/users/list', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'validate_room_capacity', '/room/validate'), _defineProperty(_ENDPOINTS, 'compliance_configuration', { url: '/compliance/configurations', errorConfig: { handler: 'detailedErrorHandler' } }), _defineProperty(_ENDPOINTS, 'fetch_account', '/api/v1/accounts'), _defineProperty(_ENDPOINTS, 'fetch_opportunity', '/api/v1/opportunities'), _defineProperty(_ENDPOINTS, 'supported_api_detail', '/adapter_ui/supported_api_details'), _defineProperty(_ENDPOINTS, 'jn_integration_fields', '/adapter_ui/mappings'), _defineProperty(_ENDPOINTS, 'save_auth_form', '/adapter_ui/integrations/save_auth_fields'), _defineProperty(_ENDPOINTS, 'update_int_config', function update_int_config(uuid) {
    return '/adapter_ui/integration/' + uuid + '/status';
  }), _defineProperty(_ENDPOINTS, 'room_block', '/api/v1/room/interim_block'), _defineProperty(_ENDPOINTS, 'pendo_nps_consent', '/dashboard/pendo_nps'), _defineProperty(_ENDPOINTS, 'get_gdpr_message', '/configuration/privacy_messages'), _defineProperty(_ENDPOINTS, 'fetch_registered_integration', '/adapter_ui/enabled_badge_scans'), _defineProperty(_ENDPOINTS, 'fetch_integration_available_fileds', '/adapter_ui/supported_api_details/parse_schema'), _defineProperty(_ENDPOINTS, 'fetch_available_conferences', '/hangout/conferences'), _defineProperty(_ENDPOINTS, 'create_conference', '/hangout/conferences/'), _ENDPOINTS),

  API_cache: {},

  summuryErrorHandler: function summuryErrorHandler(url, response, errorConfigs) {
    var errorJson = response.responseJSON;
    var modelEl = $('.notification-modal');
    modelEl.notificationModal({
      type: 'notification',
      title: errorConfigs.custom_title || i18n.t('failure'),
      body: errorConfigs.custom_message || errorJson.message,
      class: 'red'
    });
  },

  detailedErrorHandler: function detailedErrorHandler(url, response, errorConfigs) {
    var errorJson = response.responseJSON;
    var errorMsg;
    try {
      errorMsg = _.flatten(_.values(errorJson.errors.details)).join('</br>');
    } catch (err) {
      errorMsg = '';
    }
    var modelEl = $('.notification-modal');
    modelEl.notificationModal({
      type: 'notification',
      title: errorConfigs.custom_title || i18n.t('failure'),
      body: errorConfigs.custom_message || errorMsg,
      class: 'red'
    });
  },

  replaceUrlParams: function replaceUrlParams() {
    var urlEndpoint = _.cloneDeep(arguments[0]);
    if ((typeof urlEndpoint === 'undefined' ? 'undefined' : _typeof(urlEndpoint)) !== 'object') {
      urlEndpoint = { url: urlEndpoint };
    }
    for (var i = 1; i < arguments.length; i++) {
      urlEndpoint.url = urlEndpoint.url.replace(arguments[i][0], arguments[i][1]);
    }
    return urlEndpoint;
  },

  update: function update(options) {
    var _this = this;

    if (options.data && options.data.constructor === FormData) {
      options.data.append('current_location_uuid', envDetails.current_location_uuid);
    } else {
      _.merge(options, { data: { current_location_uuid: envDetails.current_location_uuid } });
    }

    if (_typeof(options.url) === 'object') {
      var errorHandlerConfigs = {};
      var errorHandlerFn;
      if (_typeof(options.url.errorConfig) === 'object') {
        errorHandlerFn = this[options.url.errorConfig.handler];
        errorHandlerConfigs = options.url.errorConfig;
      } else {
        errorHandlerFn = this[options.url.errorConfig];
      }
      options.url = options.url.url;
    }

    options = _.assign({
      dataType: 'json',
      type: options.method || 'post',
      url: '/events',
      errorHandlerFn: errorHandlerFn,
      errorHandlerConfigs: errorHandlerConfigs,
      data: { event: null },
      prefix: envDetails['urlPrefix']
    }, options);

    if (options.req_stringify) {
      options.data = JSON.stringify(options.data);
    }

    if (!/^https?/.test(options['url'])) {
      options['url'] = options['prefix'] + options['url'];
    }
    // TODO: Need a fix here to consider showing loader section loader and handling abort with only one argument check.
    options.sectionLoader && this.setPageLoader(options);
    var promise = $.ajax(options);
    if (options.abortSequentialCalls) {
      this.addRemoveCache(options['url'], promise);
      promise.then(function () {
        _this.UiActionsOnUpdate(options);
      });
    }
    return promise;
  },

  fetch: function fetch(options) {
    if (_typeof(options.url) === 'object') {
      var errorHandlerConfigs = {};
      var errorHandlerFn;
      if (_typeof(options.url.errorConfig) === 'object') {
        errorHandlerFn = this[options.url.errorConfig.handler];
      } else {
        errorHandlerFn = this[options.url.errorConfig];
      }
      options.url = options.url.url;
    }

    options = _.assign({
      dataType: 'json',
      type: 'get',
      url: '/events',
      errorHandlerFn: errorHandlerFn,
      errorHandlerConfigs: errorHandlerConfigs,
      trimSearch: true,
      prefix: envDetails['urlPrefix'] || ''
    }, _.merge(options, { data: { current_location_uuid: envDetails.current_location_uuid } }));

    // by default trim whitespaces from beginning and end of search string

    if (options.data && typeof options.data.search === 'string' && options.trimSearch) {
      options.data.search = options.data.search.trimSpacesForSearch();
    }

    if (!/^https?/.test(options['url'])) {
      options['url'] = options['prefix'] + options['url'];
    }
    var promise = $.ajax(options);
    return promise;
  },

  addRemoveCache: function addRemoveCache(url, promise) {
    if (this.API_cache[url] && this.API_cache[url].state() != 'resolved') {
      this.API_cache[url].abort();
    }
    delete this.API_cache[url];
    this.API_cache[url] = promise;
  },

  setPageLoader: function setPageLoader(_ref) {
    var url = _ref.url,
        sectionLoader = _ref.sectionLoader,
        btnsToDisable = _ref.btnsToDisable;

    envDetails.startPageLoader = false;
    if (!this.API_cache[url]) {
      this.toggleSectionLoader(sectionLoader);
      this.disableWhileFetchingData(true, btnsToDisable);
    }
  },

  UiActionsOnUpdate: function UiActionsOnUpdate(_ref2) {
    var url = _ref2.url,
        sectionLoader = _ref2.sectionLoader,
        btnsToDisable = _ref2.btnsToDisable;

    delete this.API_cache[url];
    this.toggleSectionLoader(sectionLoader);
    this.disableWhileFetchingData(false, btnsToDisable);
  },

  toggleSectionLoader: function toggleSectionLoader(sectionLoader) {
    $(sectionLoader).toggleClass('hide');
  },

  disableWhileFetchingData: function disableWhileFetchingData(shouldDisable, elms) {
    $(elms).attr('disabled', shouldDisable);
  }

};

module.exports = Api;

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars.runtime.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _handlebarsBase = __webpack_require__(/*! ./handlebars/base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

var _handlebarsSafeString = __webpack_require__(/*! ./handlebars/safe-string */ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js");

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = __webpack_require__(/*! ./handlebars/exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = __webpack_require__(/*! ./handlebars/utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = __webpack_require__(/*! ./handlebars/runtime */ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js");

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = __webpack_require__(/*! ./handlebars/no-conflict */ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js");

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;

exports['default'] = inst;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OEJBQXNCLG1CQUFtQjs7SUFBN0IsSUFBSTs7Ozs7b0NBSU8sMEJBQTBCOzs7O21DQUMzQix3QkFBd0I7Ozs7K0JBQ3ZCLG9CQUFvQjs7SUFBL0IsS0FBSzs7aUNBQ1Esc0JBQXNCOztJQUFuQyxPQUFPOztvQ0FFSSwwQkFBMEI7Ozs7O0FBR2pELFNBQVMsTUFBTSxHQUFHO0FBQ2hCLE1BQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7O0FBRTFDLE9BQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQyxVQUFVLG9DQUFhLENBQUM7QUFDM0IsSUFBRSxDQUFDLFNBQVMsbUNBQVksQ0FBQztBQUN6QixJQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDOztBQUU3QyxJQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNoQixJQUFFLENBQUMsUUFBUSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQzNCLFdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDbkMsQ0FBQzs7QUFFRixTQUFPLEVBQUUsQ0FBQztDQUNYOztBQUVELElBQUksSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUVyQixrQ0FBVyxJQUFJLENBQUMsQ0FBQzs7QUFFakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7cUJBRVIsSUFBSSIsImZpbGUiOiJoYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/base.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _helpers = __webpack_require__(/*! ./helpers */ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js");

var _decorators = __webpack_require__(/*! ./decorators */ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js");

var _logger = __webpack_require__(/*! ./logger */ "./node_modules/handlebars/dist/cjs/handlebars/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var VERSION = '4.1.2';
exports.VERSION = VERSION;
var COMPILER_REVISION = 7;

exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0'
};

exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: _logger2['default'],
  log: _logger2['default'].log,

  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }
      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },

  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },

  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }
      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  }
};

var log = _logger2['default'].log;

exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cUJBQTRDLFNBQVM7O3lCQUMvQixhQUFhOzs7O3VCQUNFLFdBQVc7OzBCQUNSLGNBQWM7O3NCQUNuQyxVQUFVOzs7O0FBRXRCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQzs7QUFDeEIsSUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7OztBQUU1QixJQUFNLGdCQUFnQixHQUFHO0FBQzlCLEdBQUMsRUFBRSxhQUFhO0FBQ2hCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxVQUFVO0FBQ2IsR0FBQyxFQUFFLGtCQUFrQjtBQUNyQixHQUFDLEVBQUUsaUJBQWlCO0FBQ3BCLEdBQUMsRUFBRSxVQUFVO0NBQ2QsQ0FBQzs7O0FBRUYsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUM7O0FBRTlCLFNBQVMscUJBQXFCLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7QUFDbkUsTUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQzdCLE1BQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxJQUFJLEVBQUUsQ0FBQztBQUMvQixNQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7O0FBRW5DLGtDQUF1QixJQUFJLENBQUMsQ0FBQztBQUM3Qix3Q0FBMEIsSUFBSSxDQUFDLENBQUM7Q0FDakM7O0FBRUQscUJBQXFCLENBQUMsU0FBUyxHQUFHO0FBQ2hDLGFBQVcsRUFBRSxxQkFBcUI7O0FBRWxDLFFBQU0scUJBQVE7QUFDZCxLQUFHLEVBQUUsb0JBQU8sR0FBRzs7QUFFZixnQkFBYyxFQUFFLHdCQUFTLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDakMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFVBQUksRUFBRSxFQUFFO0FBQUUsY0FBTSwyQkFBYyx5Q0FBeUMsQ0FBQyxDQUFDO09BQUU7QUFDM0Usb0JBQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1QixNQUFNO0FBQ0wsVUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDekI7R0FDRjtBQUNELGtCQUFnQixFQUFFLDBCQUFTLElBQUksRUFBRTtBQUMvQixXQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDM0I7O0FBRUQsaUJBQWUsRUFBRSx5QkFBUyxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQ3ZDLFFBQUksZ0JBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUN0QyxvQkFBTyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzdCLE1BQU07QUFDTCxVQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsRUFBRTtBQUNsQyxjQUFNLHlFQUEwRCxJQUFJLG9CQUFpQixDQUFDO09BQ3ZGO0FBQ0QsVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7S0FDL0I7R0FDRjtBQUNELG1CQUFpQixFQUFFLDJCQUFTLElBQUksRUFBRTtBQUNoQyxXQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDNUI7O0FBRUQsbUJBQWlCLEVBQUUsMkJBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNwQyxRQUFJLGdCQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDdEMsVUFBSSxFQUFFLEVBQUU7QUFBRSxjQUFNLDJCQUFjLDRDQUE0QyxDQUFDLENBQUM7T0FBRTtBQUM5RSxvQkFBTyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQy9CLE1BQU07QUFDTCxVQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUM1QjtHQUNGO0FBQ0QscUJBQW1CLEVBQUUsNkJBQVMsSUFBSSxFQUFFO0FBQ2xDLFdBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUM5QjtDQUNGLENBQUM7O0FBRUssSUFBSSxHQUFHLEdBQUcsb0JBQU8sR0FBRyxDQUFDOzs7UUFFcEIsV0FBVztRQUFFLE1BQU0iLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmd9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdEhlbHBlcnN9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQge3JlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnN9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4xLjInO1xuZXhwb3J0IGNvbnN0IENPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0IGNvbnN0IFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAnXG59O1xuXG5jb25zdCBvYmplY3RUeXBlID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcbiAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcbiAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG4gIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XG59XG5cbkhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGViYXJzRW52aXJvbm1lbnQsXG5cbiAgbG9nZ2VyOiBsb2dnZXIsXG4gIGxvZzogbG9nZ2VyLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgaGVscGVycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oYEF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIiR7bmFtZX1cIiBhcyB1bmRlZmluZWRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7IHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpOyB9XG4gICAgICBleHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBsb2cgPSBsb2dnZXIubG9nO1xuXG5leHBvcnQge2NyZWF0ZUZyYW1lLCBsb2dnZXJ9O1xuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _decoratorsInline = __webpack_require__(/*! ./decorators/inline */ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js");

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0NBQTJCLHFCQUFxQjs7OztBQUV6QyxTQUFTLHlCQUF5QixDQUFDLFFBQVEsRUFBRTtBQUNsRCxnQ0FBZSxRQUFRLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJkZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG5cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;
    if (!props.partials) {
      props.partials = {};
      ret = function (context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQXFCLFVBQVU7O3FCQUVoQixVQUFTLFFBQVEsRUFBRTtBQUNoQyxVQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQzNFLFFBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25CLFdBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFNBQUcsR0FBRyxVQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUU7O0FBRS9CLFlBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbEMsaUJBQVMsQ0FBQyxRQUFRLEdBQUcsY0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRCxZQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLGlCQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QixlQUFPLEdBQUcsQ0FBQztPQUNaLENBQUM7S0FDSDs7QUFFRCxTQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUU3QyxXQUFPLEdBQUcsQ0FBQztHQUNaLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlubGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGxldCByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFydGlhbHMgc3RhY2sgZnJhbWUgcHJpb3IgdG8gZXhlYy5cbiAgICAgICAgbGV0IG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBleHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG4gICAgICAgIGxldCByZXQgPSBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/exception.js":
/*!******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/exception.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      column = undefined;
  if (loc) {
    line = loc.start.line;
    column = loc.start.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  /* istanbul ignore else */
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line;

      // Work around issue under safari where we can't directly set the column value
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
      } else {
        this.column = column;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();

exports['default'] = Exception;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsSUFBTSxVQUFVLEdBQUcsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQzs7QUFFbkcsU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNoQyxNQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUc7TUFDdEIsSUFBSSxZQUFBO01BQ0osTUFBTSxZQUFBLENBQUM7QUFDWCxNQUFJLEdBQUcsRUFBRTtBQUNQLFFBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN0QixVQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7O0FBRTFCLFdBQU8sSUFBSSxLQUFLLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7R0FDeEM7O0FBRUQsTUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQzs7O0FBRzFELE9BQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO0FBQ2hELFFBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7R0FDOUM7OztBQUdELE1BQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFO0FBQzNCLFNBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7R0FDMUM7O0FBRUQsTUFBSTtBQUNGLFFBQUksR0FBRyxFQUFFO0FBQ1AsVUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7Ozs7QUFJdkIsVUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFO0FBQ3pCLGNBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUNwQyxlQUFLLEVBQUUsTUFBTTtBQUNiLG9CQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7T0FDSixNQUFNO0FBQ0wsWUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7T0FDdEI7S0FDRjtHQUNGLENBQUMsT0FBTyxHQUFHLEVBQUU7O0dBRWI7Q0FDRjs7QUFFRCxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7O3FCQUVuQixTQUFTIiwiZmlsZSI6ImV4Y2VwdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgZXJyb3JQcm9wcyA9IFsnZGVzY3JpcHRpb24nLCAnZmlsZU5hbWUnLCAnbGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgICAgbGluZSxcbiAgICAgIGNvbHVtbjtcbiAgaWYgKGxvYykge1xuICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcblxuICAgICAgLy8gV29yayBhcm91bmQgaXNzdWUgdW5kZXIgc2FmYXJpIHdoZXJlIHdlIGNhbid0IGRpcmVjdGx5IHNldCB0aGUgY29sdW1uIHZhbHVlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogY29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKG5vcCkge1xuICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cbiAgfVxufVxuXG5FeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbmV4cG9ydCBkZWZhdWx0IEV4Y2VwdGlvbjtcbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _helpersBlockHelperMissing = __webpack_require__(/*! ./helpers/block-helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js");

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = __webpack_require__(/*! ./helpers/each */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js");

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = __webpack_require__(/*! ./helpers/helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js");

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = __webpack_require__(/*! ./helpers/if */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js");

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = __webpack_require__(/*! ./helpers/log */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js");

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = __webpack_require__(/*! ./helpers/lookup */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js");

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = __webpack_require__(/*! ./helpers/with */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js");

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);
  _helpersEach2['default'](instance);
  _helpersHelperMissing2['default'](instance);
  _helpersIf2['default'](instance);
  _helpersLog2['default'](instance);
  _helpersLookup2['default'](instance);
  _helpersWith2['default'](instance);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7eUNBQXVDLGdDQUFnQzs7OzsyQkFDOUMsZ0JBQWdCOzs7O29DQUNQLDBCQUEwQjs7Ozt5QkFDckMsY0FBYzs7OzswQkFDYixlQUFlOzs7OzZCQUNaLGtCQUFrQjs7OzsyQkFDcEIsZ0JBQWdCOzs7O0FBRWxDLFNBQVMsc0JBQXNCLENBQUMsUUFBUSxFQUFFO0FBQy9DLHlDQUEyQixRQUFRLENBQUMsQ0FBQztBQUNyQywyQkFBYSxRQUFRLENBQUMsQ0FBQztBQUN2QixvQ0FBc0IsUUFBUSxDQUFDLENBQUM7QUFDaEMseUJBQVcsUUFBUSxDQUFDLENBQUM7QUFDckIsMEJBQVksUUFBUSxDQUFDLENBQUM7QUFDdEIsNkJBQWUsUUFBUSxDQUFDLENBQUM7QUFDekIsMkJBQWEsUUFBUSxDQUFDLENBQUM7Q0FDeEIiLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZWdpc3RlckJsb2NrSGVscGVyTWlzc2luZyBmcm9tICcuL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcnO1xuaW1wb3J0IHJlZ2lzdGVyRWFjaCBmcm9tICcuL2hlbHBlcnMvZWFjaCc7XG5pbXBvcnQgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJJZiBmcm9tICcuL2hlbHBlcnMvaWYnO1xuaW1wb3J0IHJlZ2lzdGVyTG9nIGZyb20gJy4vaGVscGVycy9sb2cnO1xuaW1wb3J0IHJlZ2lzdGVyTG9va3VwIGZyb20gJy4vaGVscGVycy9sb29rdXAnO1xuaW1wb3J0IHJlZ2lzdGVyV2l0aCBmcm9tICcuL2hlbHBlcnMvd2l0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XG4gIHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJFYWNoKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJIZWxwZXJNaXNzaW5nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJJZihpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyTG9nKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb29rdXAoaW5zdGFuY2UpO1xuICByZWdpc3RlcldpdGgoaW5zdGFuY2UpO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = { data: data };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBc0QsVUFBVTs7cUJBRWpELFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3ZFLFFBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPO1FBQ3pCLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVwQixRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsYUFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakIsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtBQUMvQyxhQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QixNQUFNLElBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUMzQixVQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLFlBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNmLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCOztBQUVELGVBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2hELE1BQU07QUFDTCxlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN0QjtLQUNGLE1BQU07QUFDTCxVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLElBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdFLGVBQU8sR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztPQUN4Qjs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0I7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJibG9jay1oZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGNyZWF0ZUZyYW1lLCBpc0FycmF5fSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcbiAgICAgICAgb3B0aW9ucyA9IHtkYXRhOiBkYXRhfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && typeof context === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else {
        var priorKey = undefined;

        for (var key in context) {
          if (context.hasOwnProperty(key)) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          }
        }
        if (priorKey !== undefined) {
          execIteration(priorKey, i - 1, true);
        }
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQUErRSxVQUFVOzt5QkFDbkUsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksQ0FBQyxPQUFPLEVBQUU7QUFDWixZQUFNLDJCQUFjLDZCQUE2QixDQUFDLENBQUM7S0FDcEQ7O0FBRUQsUUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUU7UUFDZixPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU87UUFDekIsQ0FBQyxHQUFHLENBQUM7UUFDTCxHQUFHLEdBQUcsRUFBRTtRQUNSLElBQUksWUFBQTtRQUNKLFdBQVcsWUFBQSxDQUFDOztBQUVoQixRQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixpQkFBVyxHQUFHLHlCQUFrQixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ2pGOztBQUVELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFBRSxhQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOztBQUUxRCxRQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDaEIsVUFBSSxHQUFHLG1CQUFZLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNsQzs7QUFFRCxhQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUN6QyxVQUFJLElBQUksRUFBRTtBQUNSLFlBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2pCLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFlBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUN6QixZQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7O0FBRW5CLFlBQUksV0FBVyxFQUFFO0FBQ2YsY0FBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQ3hDO09BQ0Y7O0FBRUQsU0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzdCLFlBQUksRUFBRSxJQUFJO0FBQ1YsbUJBQVcsRUFBRSxtQkFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDL0UsQ0FBQyxDQUFDO0tBQ0o7O0FBRUQsUUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzFDLFVBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNwQixhQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxjQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDaEIseUJBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQy9DO1NBQ0Y7T0FDRixNQUFNO0FBQ0wsWUFBSSxRQUFRLFlBQUEsQ0FBQzs7QUFFYixhQUFLLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtBQUN2QixjQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Ozs7QUFJL0IsZ0JBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQiwyQkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDaEM7QUFDRCxvQkFBUSxHQUFHLEdBQUcsQ0FBQztBQUNmLGFBQUMsRUFBRSxDQUFDO1dBQ0w7U0FDRjtBQUNELFlBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQix1QkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3RDO09BQ0Y7S0FDRjs7QUFFRCxRQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDWCxTQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCOztBQUVELFdBQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiZWFjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwZW5kQ29udGV4dFBhdGgsIGJsb2NrUGFyYW1zLCBjcmVhdGVGcmFtZSwgaXNBcnJheSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICAgIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICByZXQgPSAnJyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dFBhdGg7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICBjb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7IGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7IH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmtleSA9IGZpZWxkO1xuICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcbiAgICAgICAgZGF0YS5sYXN0ID0gISFsYXN0O1xuXG4gICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbZmllbGRdLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcbiAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAgIC8vIGFuIGl0ZXJtZWRpYXRlIGtleXMgYXJyYXkuXG4gICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmlvcktleSA9IGtleTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports['default'] = function (instance) {
  instance.registerHelper('helperMissing', function () /* [args, ]options */{
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt5QkFBc0IsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsaUNBQWdDO0FBQ3ZFLFFBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7O0FBRTFCLGFBQU8sU0FBUyxDQUFDO0tBQ2xCLE1BQU07O0FBRUwsWUFBTSwyQkFBYyxtQkFBbUIsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDdkY7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJoZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbigvKiBbYXJncywgXW9wdGlvbnMgKi8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function (conditional, options) {
    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBa0MsVUFBVTs7cUJBRTdCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVMsV0FBVyxFQUFFLE9BQU8sRUFBRTtBQUMzRCxRQUFJLGtCQUFXLFdBQVcsQ0FBQyxFQUFFO0FBQUUsaUJBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQUU7Ozs7O0FBS3RFLFFBQUksQUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxJQUFLLGVBQVEsV0FBVyxDQUFDLEVBQUU7QUFDdkUsYUFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7R0FDRixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxXQUFXLEVBQUUsT0FBTyxFQUFFO0FBQy9ELFdBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztHQUN2SCxDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJpZi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNFbXB0eSwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaWYnLCBmdW5jdGlvbihjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkgeyBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7IH1cblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG4gICAgaWYgKCghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCkgfHwgaXNFbXB0eShjb25kaXRpb25hbCkpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnNbJ2lmJ10uY2FsbCh0aGlzLCBjb25kaXRpb25hbCwge2ZuOiBvcHRpb25zLmludmVyc2UsIGludmVyc2U6IG9wdGlvbnMuZm4sIGhhc2g6IG9wdGlvbnMuaGFzaH0pO1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('log', function () /* message, options */{
    var args = [undefined],
        options = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;
    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }
    args[0] = level;

    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsa0NBQWlDO0FBQzlELFFBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ2xCLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM5QyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0MsVUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7QUFFRCxRQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtBQUM5QixXQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDNUIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JELFdBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUM1QjtBQUNELFFBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRWhCLFlBQVEsQ0FBQyxHQUFHLE1BQUEsQ0FBWixRQUFRLEVBQVMsSUFBSSxDQUFDLENBQUM7R0FDeEIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIGxldCBsZXZlbCA9IDE7XG4gICAgaWYgKG9wdGlvbnMuaGFzaC5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuaGFzaC5sZXZlbDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGEubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmRhdGEubGV2ZWw7XG4gICAgfVxuICAgIGFyZ3NbMF0gPSBsZXZlbDtcblxuICAgIGluc3RhbmNlLmxvZyguLi4gYXJncyk7XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js":
/*!***********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports['default'] = function (instance) {
  instance.registerHelper('lookup', function (obj, field) {
    if (!obj) {
      return obj;
    }
    if (field === 'constructor' && !obj.propertyIsEnumerable(field)) {
      return undefined;
    }
    return obj[field];
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQ3JELFFBQUksQ0FBQyxHQUFHLEVBQUU7QUFDUixhQUFPLEdBQUcsQ0FBQztLQUNaO0FBQ0QsUUFBSSxLQUFLLEtBQUssYUFBYSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQy9ELGFBQU8sU0FBUyxDQUFDO0tBQ2xCO0FBQ0QsV0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDbkIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9va3VwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvb2t1cCcsIGZ1bmN0aW9uKG9iaiwgZmllbGQpIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgaWYgKGZpZWxkID09PSAnY29uc3RydWN0b3InICYmICFvYmoucHJvcGVydHlJc0VudW1lcmFibGUoZmllbGQpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gb2JqW2ZpZWxkXTtcbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports['default'] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;
      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUErRSxVQUFVOztxQkFFMUUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3pELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFBRSxhQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUFFOztBQUUxRCxRQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVwQixRQUFJLENBQUMsZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNyQixVQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLFVBQUksT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO0FBQy9CLFlBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ2hGOztBQUVELGFBQU8sRUFBRSxDQUFDLE9BQU8sRUFBRTtBQUNqQixZQUFJLEVBQUUsSUFBSTtBQUNWLG1CQUFXLEVBQUUsbUJBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7T0FDaEUsQ0FBQyxDQUFDO0tBQ0osTUFBTTtBQUNMLGFBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QjtHQUNGLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6IndpdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FwcGVuZENvbnRleHRQYXRoLCBibG9ja1BhcmFtcywgY3JlYXRlRnJhbWUsIGlzRW1wdHksIGlzRnVuY3Rpb259IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3dpdGgnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHsgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTsgfVxuXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/logger.js":
/*!***************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/logger.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',

  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },

  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];
      if (!console[method]) {
        // eslint-disable-line no-console
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};

exports['default'] = logger;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFzQixTQUFTOztBQUUvQixJQUFJLE1BQU0sR0FBRztBQUNYLFdBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztBQUM3QyxPQUFLLEVBQUUsTUFBTTs7O0FBR2IsYUFBVyxFQUFFLHFCQUFTLEtBQUssRUFBRTtBQUMzQixRQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUM3QixVQUFJLFFBQVEsR0FBRyxlQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDOUQsVUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ2pCLGFBQUssR0FBRyxRQUFRLENBQUM7T0FDbEIsTUFBTTtBQUNMLGFBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO09BQzdCO0tBQ0Y7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZDs7O0FBR0QsS0FBRyxFQUFFLGFBQVMsS0FBSyxFQUFjO0FBQy9CLFNBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVsQyxRQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7QUFDL0UsVUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxVQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFOztBQUNwQixjQUFNLEdBQUcsS0FBSyxDQUFDO09BQ2hCOzt3Q0FQbUIsT0FBTztBQUFQLGVBQU87OztBQVEzQixhQUFPLENBQUMsTUFBTSxPQUFDLENBQWYsT0FBTyxFQUFZLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0dBQ0Y7Q0FDRixDQUFDOztxQkFFYSxNQUFNIiwiZmlsZSI6ImxvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aW5kZXhPZn0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGVbbWV0aG9kXSguLi5tZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* global window */


exports.__esModule = true;

exports['default'] = function (Handlebars) {
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */
  Handlebars.noConflict = function () {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }
    return Handlebars;
  };
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O3FCQUNlLFVBQVMsVUFBVSxFQUFFOztBQUVsQyxNQUFJLElBQUksR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLEdBQUcsTUFBTSxHQUFHLE1BQU07TUFDdEQsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7O0FBRWxDLFlBQVUsQ0FBQyxVQUFVLEdBQUcsWUFBVztBQUNqQyxRQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO0FBQ2xDLFVBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO0tBQy9CO0FBQ0QsV0FBTyxVQUFVLENBQUM7R0FDbkIsQ0FBQztDQUNIIiwiZmlsZSI6Im5vLWNvbmZsaWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIHdpbmRvdyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oSGFuZGxlYmFycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBsZXQgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxuICAgICAgJEhhbmRsZWJhcnMgPSByb290LkhhbmRsZWJhcnM7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcbiAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xuICAgIH1cbiAgICByZXR1cm4gSGFuZGxlYmFycztcbiAgfTtcbn1cbiJdfQ==

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/runtime.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_utils);

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _base = __webpack_require__(/*! ./base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
    }
  }
}

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
  }

  templateSpec.main.decorator = templateSpec.main_d;

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }

    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var result = env.VM.invokePartial.call(this, partial, context, options);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, options);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  }

  // Just add water
  var container = {
    strict: function strict(obj, name) {
      if (!(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
      }
      return obj[name];
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },

    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }
      return programWrapper;
    },

    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    merge: function merge(param, common) {
      var obj = param || common;

      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }

      return obj;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context /*, options*/) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }
    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }
  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = container.merge(options.decorators, env.decorators);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;
  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data);
      // Wrapper function to get access to currentPartialBlock from the closure
      var fn = options.fn;
      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.
        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };
      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }
  return prog;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/safe-string.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Build out our basic SafeString type


exports.__esModule = true;
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports['default'] = SafeString;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Q0FDdEI7O0FBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBVztBQUN2RSxTQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ3pCLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoic2FmZS1zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/utils.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;
var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;

exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
/* eslint-disable func-style */
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  exports.isFunction = isFunction = function (value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
exports.isFunction = isFunction;

/* eslint-enable func-style */

/* istanbul ignore next */
var isArray = Array.isArray || function (value) {
  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFNLE1BQU0sR0FBRztBQUNiLEtBQUcsRUFBRSxPQUFPO0FBQ1osS0FBRyxFQUFFLE1BQU07QUFDWCxLQUFHLEVBQUUsTUFBTTtBQUNYLEtBQUcsRUFBRSxRQUFRO0FBQ2IsS0FBRyxFQUFFLFFBQVE7QUFDYixLQUFHLEVBQUUsUUFBUTtBQUNiLEtBQUcsRUFBRSxRQUFRO0NBQ2QsQ0FBQzs7QUFFRixJQUFNLFFBQVEsR0FBRyxZQUFZO0lBQ3ZCLFFBQVEsR0FBRyxXQUFXLENBQUM7O0FBRTdCLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUN2QixTQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNwQjs7QUFFTSxTQUFTLE1BQU0sQ0FBQyxHQUFHLG9CQUFtQjtBQUMzQyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6QyxTQUFLLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUM1QixVQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDM0QsV0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUM5QjtLQUNGO0dBQ0Y7O0FBRUQsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7O0FBS2hELElBQUksVUFBVSxHQUFHLG9CQUFTLEtBQUssRUFBRTtBQUMvQixTQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztDQUNwQyxDQUFDOzs7QUFHRixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQixVQUlNLFVBQVUsR0FKaEIsVUFBVSxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQzNCLFdBQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssbUJBQW1CLENBQUM7R0FDcEYsQ0FBQztDQUNIO1FBQ08sVUFBVSxHQUFWLFVBQVU7Ozs7O0FBSVgsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sSUFBSSxVQUFTLEtBQUssRUFBRTtBQUN0RCxTQUFPLEFBQUMsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsR0FBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGdCQUFnQixHQUFHLEtBQUssQ0FBQztDQUNqRyxDQUFDOzs7OztBQUdLLFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDcEMsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoRCxRQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDdEIsYUFBTyxDQUFDLENBQUM7S0FDVjtHQUNGO0FBQ0QsU0FBTyxDQUFDLENBQUMsQ0FBQztDQUNYOztBQUdNLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ3ZDLE1BQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFOztBQUU5QixRQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzNCLGFBQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3hCLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3pCLGFBQU8sRUFBRSxDQUFDO0tBQ1gsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2xCLGFBQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQztLQUNwQjs7Ozs7QUFLRCxVQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztHQUN0Qjs7QUFFRCxNQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUFFLFdBQU8sTUFBTSxDQUFDO0dBQUU7QUFDOUMsU0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztDQUM3Qzs7QUFFTSxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDN0IsTUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFdBQU8sSUFBSSxDQUFDO0dBQ2IsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvQyxXQUFPLElBQUksQ0FBQztHQUNiLE1BQU07QUFDTCxXQUFPLEtBQUssQ0FBQztHQUNkO0NBQ0Y7O0FBRU0sU0FBUyxXQUFXLENBQUMsTUFBTSxFQUFFO0FBQ2xDLE1BQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsT0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDdkIsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFTSxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ3ZDLFFBQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRU0sU0FBUyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO0FBQ2pELFNBQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUEsR0FBSSxFQUFFLENBQUM7Q0FDcEQiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gICAgICBwb3NzaWJsZSA9IC9bJjw+XCInYD1dLztcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcihjaHIpIHtcbiAgcmV0dXJuIGVzY2FwZVtjaHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iai8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydCB7aXNGdW5jdGlvbn07XG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcbn07XG5cbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkgeyByZXR1cm4gc3RyaW5nOyB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICBsZXQgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG4gIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/runtime.js":
/*!********************************************!*\
  !*** ./node_modules/handlebars/runtime.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = __webpack_require__(/*! ./dist/cjs/handlebars.runtime */ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js")['default'];


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./templates/helpers/t.js":
/*!********************************!*\
  !*** ./templates/helpers/t.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (i18n_key, label) {
	var result = i18n.t(i18n_key, { label: label });
	return new Handlebars.SafeString(result);
};

/***/ }),

/***/ "./templates/meeting/checkin.hbs":
/*!***************************************!*\
  !*** ./templates/meeting/checkin.hbs ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "      <div class=\"card meeting-card "
    + alias4(((helper = (helper = helpers.status || (depth0 != null ? depth0.status : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"status","hash":{},"data":data}) : helper)))
    + "\" data-uuid='"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "'>\n        <div class=\"card-header\">\n          <div class=\"card-header-content\">\n            <div class=\"card-select\">\n              <input type=\"checkbox\" class=\"meeting_card\" data-edit='"
    + alias4(((helper = (helper = helpers.edit || (depth0 != null ? depth0.edit : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"edit","hash":{},"data":data}) : helper)))
    + "' data-status=\""
    + alias4(((helper = (helper = helpers.status || (depth0 != null ? depth0.status : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"status","hash":{},"data":data}) : helper)))
    + "\" id=\""
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\">\n              <label for=\""
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\">\n                <div>M</div>\n              </label>\n            </div>\n            <div class=\"card-click\">\n"
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.meeting_with : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0, blockParams, depths),"inverse":container.program(4, data, 0, blockParams, depths),"data":data})) != null ? stack1 : "")
    + "              <div class=\"font-lg\">"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"ID",{"name":"t","hash":{},"data":data}))
    + " #"
    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
    + "</div>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-content\">\n          <div class=\"card-detail-content\">\n            <div >\n              <div class=\"card-detail icon-sep\">\n                <div class=\"text-content\">\n                  <span class=\"font-semi-bold\">"
    + alias4(((helper = (helper = helpers.startTime || (depth0 != null ? depth0.startTime : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"startTime","hash":{},"data":data}) : helper)))
    + " - "
    + alias4(((helper = (helper = helpers.endTime || (depth0 != null ? depth0.endTime : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"endTime","hash":{},"data":data}) : helper)))
    + "</span>\n                  <br>\n                  <span class=\"font-sm\">"
    + alias4(((helper = (helper = helpers.meetingDate || (depth0 != null ? depth0.meetingDate : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"meetingDate","hash":{},"data":data}) : helper)))
    + "</span>\n                </div>\n                <div class=\"icon-content hide jif-blue text-center icon-box\">\n                  <i class=\"jif-checkin\"></i>\n                  <div class=\"font-8\">"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"checkin",{"name":"t","hash":{},"data":data}))
    + "</div>\n                </div>\n              </div>\n              <div class=\"card-detail icon-sep\">\n                <div class=\"text-content\" title=\""
    + alias4(((helper = (helper = helpers.location || (depth0 != null ? depth0.location : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"location","hash":{},"data":data}) : helper)))
    + "\">\n                  "
    + alias4(((helper = (helper = helpers.location || (depth0 != null ? depth0.location : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"location","hash":{},"data":data}) : helper)))
    + "\n                </div>\n                <div class=\"icon-content hide jif-blue text-center icon-box\">\n                  <i class=\"jif-location\"></i>\n                  <div class=\"font-8\">"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"location",{"name":"t","hash":{},"data":data}))
    + "</div>\n                </div>\n              </div>\n            </div>\n            <div class=\"card-detail count hidden-xs hidden-sm\">\n              <div class=\"item-section attedee-counts\">\n                <div class=\"section-count accepted\">\n                  <div class=\"count\">"
    + alias4(((helper = (helper = helpers.acceptedCount || (depth0 != null ? depth0.acceptedCount : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"acceptedCount","hash":{},"data":data}) : helper)))
    + "</div>\n                  <div class=\"status\">"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"accepted",{"name":"t","hash":{},"data":data}))
    + "</div>\n                </div>\n                <div class=\"section-count declined\">\n                  <div class=\"count\">"
    + alias4(((helper = (helper = helpers.declinedCount || (depth0 != null ? depth0.declinedCount : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"declinedCount","hash":{},"data":data}) : helper)))
    + "</div>\n                  <div class=\"status\">"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"declined",{"name":"t","hash":{},"data":data}))
    + "</div>\n                </div>\n                <div class=\"section-count pending\">\n                  <div class=\"count\">"
    + alias4(((helper = (helper = helpers.pendingCount || (depth0 != null ? depth0.pendingCount : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"pendingCount","hash":{},"data":data}) : helper)))
    + "</div>\n                  <div class=\"status\">"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"pending",{"name":"t","hash":{},"data":data}))
    + "</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-footer\">\n           <div class=\"card-footer-content\">\n            <div class=\"toggle-switch\">\n              <input type=\"checkbox\" "
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.checkedIn : depth0),{"name":"if","hash":{},"fn":container.program(6, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + " class=\"checkin_meeting\" id=\"checkin_meeting_"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\" />\n              <label for=\"checkin_meeting_"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\"></label>\n            </div>\n            <div>"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"checkin",{"name":"t","hash":{},"data":data}))
    + "</div>\n           </div>\n        </div>\n        <div class=\"card-list-content\">\n          <div class=\"checkin-attedndee-list\">\n            <div class=\"row\">\n              <div class=\"col-md-6 col-sm-6\">\n                <div class=\"internal-attendee\">\n                  <div class=\"list-title\">"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"internal_participants",{"name":"t","hash":{},"data":data}))
    + "</div>\n                  <div>\n"
    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.users : depth0)) != null ? stack1.internal : stack1),{"name":"each","hash":{},"fn":container.program(8, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "                  </div>\n                </div>\n              </div>\n              <div class=\"col-md-6 col-sm-6\">\n                <div class=\"external-attendee\">\n                  <div class=\"list-title\">"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"external_participants",{"name":"t","hash":{},"data":data}))
    + "</div>\n                  <div>\n"
    + ((stack1 = helpers.each.call(alias1,((stack1 = (depth0 != null ? depth0.users : depth0)) != null ? stack1.external : stack1),{"name":"each","hash":{},"fn":container.program(10, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n";
},"2":function(container,depth0,helpers,partials,data) {
    var helper;

  return "              <div class=\"font-lg\">"
    + container.escapeExpression(((helper = (helper = helpers.meeting_with || (depth0 != null ? depth0.meeting_with : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"meeting_with","hash":{},"data":data}) : helper)))
    + "</div>\n";
},"4":function(container,depth0,helpers,partials,data) {
    var helper;

  return "              <div class=\"font-lg\">"
    + container.escapeExpression(((helper = (helper = helpers.topicName || (depth0 != null ? depth0.topicName : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"topicName","hash":{},"data":data}) : helper)))
    + "</div>\n";
},"6":function(container,depth0,helpers,partials,data) {
    return " checked ";
},"8":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, alias5=container.lambda;

  return "                      <div class=\"attendee-item checkin "
    + alias4(((helper = (helper = helpers.invite_status || (depth0 != null ? depth0.invite_status : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"invite_status","hash":{},"data":data}) : helper)))
    + "\">\n                        <div class=\"attendee-pic\">\n                          <i class=\"jif-people jif-light-grey jif-18\"></i>\n                          <span class=\"icon-user-"
    + alias4(((helper = (helper = helpers.invite_status || (depth0 != null ? depth0.invite_status : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"invite_status","hash":{},"data":data}) : helper)))
    + " user-status "
    + alias4(((helper = (helper = helpers.invite_status || (depth0 != null ? depth0.invite_status : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"invite_status","hash":{},"data":data}) : helper)))
    + "\"></span>\n                        </div>\n                        <div class=\"attendee-details\">\n                          <div class=\"attendee-name\">"
    + alias4(((helper = (helper = helpers.first_name || (depth0 != null ? depth0.first_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"first_name","hash":{},"data":data}) : helper)))
    + " "
    + alias4(((helper = (helper = helpers.last_name || (depth0 != null ? depth0.last_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"last_name","hash":{},"data":data}) : helper)))
    + "</div>\n                          <div class=\"attendee-desn\">\n                            <span>"
    + alias4(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"title","hash":{},"data":data}) : helper)))
    + ", </span>\n                            <span>"
    + alias4(((helper = (helper = helpers.company_name || (depth0 != null ? depth0.company_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"company_name","hash":{},"data":data}) : helper)))
    + "</span>\n                          </div>\n                        </div>\n                        <div class=\"action\">\n                          <div class=\"toggle-switch\">\n                            <input type=\"checkbox\" "
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.checkedIn : depth0),{"name":"if","hash":{},"fn":container.program(6, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + " class=\"checkin_user\" data-attendee_type=\"internal\" data-uuid=\""
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\" id=\""
    + alias4(alias5((depths[1] != null ? depths[1].uuid : depths[1]), depth0))
    + "_"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\" />\n                            <label for=\""
    + alias4(alias5((depths[1] != null ? depths[1].uuid : depths[1]), depth0))
    + "_"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\"></label>\n                          </div>\n                        </div>\n                      </div>\n";
},"10":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, alias5=container.lambda;

  return "                      <div class=\"attendee-item checkin "
    + alias4(((helper = (helper = helpers.invite_status || (depth0 != null ? depth0.invite_status : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"invite_status","hash":{},"data":data}) : helper)))
    + "\">\n                        <div class=\"attendee-pic\">\n                          <i class=\"jif-people jif-light-grey jif-18\"></i>\n                          <span class=\"icon-user-"
    + alias4(((helper = (helper = helpers.invite_status || (depth0 != null ? depth0.invite_status : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"invite_status","hash":{},"data":data}) : helper)))
    + " user-status "
    + alias4(((helper = (helper = helpers.invite_status || (depth0 != null ? depth0.invite_status : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"invite_status","hash":{},"data":data}) : helper)))
    + "\"></span>\n                        </div>\n                        <div class=\"attendee-details\">\n                          <div class=\"attendee-name\">"
    + alias4(((helper = (helper = helpers.first_name || (depth0 != null ? depth0.first_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"first_name","hash":{},"data":data}) : helper)))
    + " "
    + alias4(((helper = (helper = helpers.last_name || (depth0 != null ? depth0.last_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"last_name","hash":{},"data":data}) : helper)))
    + "</div>\n                          <div class=\"attendee-desn\">\n                            <span>"
    + alias4(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"title","hash":{},"data":data}) : helper)))
    + ", </span>\n                            <span>"
    + alias4(((helper = (helper = helpers.company_name || (depth0 != null ? depth0.company_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"company_name","hash":{},"data":data}) : helper)))
    + "</span>\n                          </div>\n                        </div>\n                        <div class=\"action\">\n                          <div class=\"toggle-switch\">\n                            <input type=\"checkbox\" "
    + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.checkedIn : depth0),{"name":"if","hash":{},"fn":container.program(6, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + " data-attendee_type=\"external\" class=\"checkin_user\" data-uuid=\""
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\" id=\""
    + alias4(alias5((depths[1] != null ? depths[1].uuid : depths[1]), depth0))
    + "_"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\" />\n                            <label for=\""
    + alias4(alias5((depths[1] != null ? depths[1].uuid : depths[1]), depth0))
    + "_"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\"></label>\n                          </div>\n                        </div>\n                      </div>\n";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1;

  return "<div class=\"card-container checkin-list meeting-list "
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.toggle_state : depth0)) != null ? stack1.viewStyle : stack1), depth0))
    + "\">\n"
    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? depth0.meeting_list : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</div>\n";
},"useData":true,"useDepths":true});

/***/ }),

/***/ "./templates/meeting/session-list.hbs":
/*!********************************************!*\
  !*** ./templates/meeting/session-list.hbs ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Handlebars = __webpack_require__(/*! ../../node_modules/handlebars/runtime.js */ "./node_modules/handlebars/runtime.js");
function __default(obj) { return obj && (obj.__esModule ? obj["default"] : obj); }
module.exports = (Handlebars["default"] || Handlebars).template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, alias5=container.lambda;

  return "    <div class=\"card meeting-card "
    + alias4(((helper = (helper = helpers.status || (depth0 != null ? depth0.status : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"status","hash":{},"data":data}) : helper)))
    + "\" data-uuid='"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "' id=\""
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\">\n      <div class=\"card-header\">\n        <div class=\"card-header-content\">\n          <div class=\"card-select\">\n            <input type=\"checkbox\" name=\"meetingCard\" data-uuid='"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "' id=\"meetingCard_"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\">\n            <label for=\"meetingCard_"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "\">\n              <div>S</div>\n            </label>\n          </div>\n          <div class=\"card-click meetingRevealCls\" id=\"session_click\" data-uuid='"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "'>\n            <a href=\"javascript:void(0)\">\n              <div class=\"font-lg meeting-title\" title=\""
    + alias4(alias5(((stack1 = (depth0 != null ? depth0.topic : depth0)) != null ? stack1.name : stack1), depth0))
    + "\">"
    + alias4(alias5(((stack1 = (depth0 != null ? depth0.topic : depth0)) != null ? stack1.name : stack1), depth0))
    + "</div>\n              <div class=\"font-lg\">"
    + alias4(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias1,"ID",{"name":"t","hash":{},"data":data}))
    + " #"
    + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
    + "</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-content meetingRevealCls\" data-uuid='"
    + alias4(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
    + "'>\n        <div class=\"card-detail-content\">\n          <div>\n            <div class=\"card-detail\">\n              <span class=\"font-semi-bold\">"
    + alias4(((helper = (helper = helpers.startTime || (depth0 != null ? depth0.startTime : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"startTime","hash":{},"data":data}) : helper)))
    + " - "
    + alias4(((helper = (helper = helpers.endTime || (depth0 != null ? depth0.endTime : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"endTime","hash":{},"data":data}) : helper)))
    + "</span>\n            <span class=\"font-sm\">"
    + alias4(((helper = (helper = helpers.sessionDate || (depth0 != null ? depth0.sessionDate : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"sessionDate","hash":{},"data":data}) : helper)))
    + "</span>\n            </div>\n            <div class=\"card-detail icon-sep\">\n              <div class=\"text-content location-text two-line-ellipsis\">\n                "
    + alias4(alias5(((stack1 = (depth0 != null ? depth0.room : depth0)) != null ? stack1.name : stack1), depth0))
    + "\n              </div>\n            </div>\n          </div>\n          <div class=\"card-detail count\">\n            <div class=\"item-section attedee-counts\">\n             <div class=\"section-count accepted\">\n               <div class=\"count\">"
    + alias4(alias5(((stack1 = (depth0 != null ? depth0.invitees_status_counts : depth0)) != null ? stack1.accepted : stack1), depth0))
    + "</div>\n               <div class=\"status\">Accepted</div>\n             </div>\n             <div class=\"section-count declined\">\n               <div class=\"count\">"
    + alias4(alias5(((stack1 = (depth0 != null ? depth0.invitees_status_counts : depth0)) != null ? stack1.declined : stack1), depth0))
    + "</div>\n               <div class=\"status\">Declined</div>\n             </div>\n             <div class=\"section-count pending\">\n               <div class=\"count\">"
    + alias4(alias5(((stack1 = (depth0 != null ? depth0.invitees_status_counts : depth0)) != null ? stack1.pending : stack1), depth0))
    + "</div>\n               <div class=\"status\">Pending</div>\n             </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <div class=\"card-footer-content padding-left-10\">\n          <div>Seats Remaining: "
    + alias4(((helper = (helper = helpers.remainingCount || (depth0 != null ? depth0.remainingCount : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"remainingCount","hash":{},"data":data}) : helper)))
    + "/"
    + alias4(((helper = (helper = helpers.capacity || (depth0 != null ? depth0.capacity : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"capacity","hash":{},"data":data}) : helper)))
    + "</div>\n        </div>\n      </div>\n    </div>\n";
},"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.escapeExpression, alias2=depth0 != null ? depth0 : (container.nullContext || {});

  return "<div class=\"card-container meeting-list "
    + alias1(container.lambda(((stack1 = (depth0 != null ? depth0.toggle_state : depth0)) != null ? stack1.viewStyle : stack1), depth0))
    + "\">\n"
    + ((stack1 = helpers.each.call(alias2,(depth0 != null ? depth0.sessions_list : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
    + "</div>\n\n\n<!-- Modal -->\n<div class=\"modal modal-jiffle modal-list event-list-modal blue fade\" id=\"group-nominatoin-list\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close hidden-lg hidden-md hidden-sm\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n        <h4 class=\"modal-title\" id=\"myModalLabel\" data-i18n=\"\">"
    + alias1(__default(__webpack_require__(/*! ../helpers/t.js */ "./templates/helpers/t.js")).call(alias2,"nomination_header",{"name":"t","hash":{},"data":data}))
    + "</h4>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"container-fluid no-padding event-list-content card-container list-view\">\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"font-red\" id=\"errorMsg\"></div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"session-nominations\">\n\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n";
},"useData":true});

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,